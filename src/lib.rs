# ! [doc = "Peripheral access API for SOC microcontrollers (generated using svd2rust v0.17.0 (3960899 2020-10-11))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.17.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
# ! [deny (const_err)]
# ! [deny (dead_code)]
# ! [deny (improper_ctypes)]
# ! [deny (missing_docs)]
# ! [deny (no_mangle_generic_items)]
# ! [deny (non_shorthand_field_patterns)]
# ! [deny (overflowing_literals)]
# ! [deny (path_statements)]
# ! [deny (patterns_in_fns_without_body)]
# ! [deny (private_in_public)]
# ! [deny (unconditional_recursion)]
# ! [deny (unused_allocation)]
# ! [deny (unused_comparisons)]
# ! [deny (unused_parens)]
# ! [deny (while_true)]
# ! [allow (non_camel_case_types)]
# ! [allow (non_snake_case)]
# ! [no_std]
use core :: ops :: Deref ; use core :: marker :: PhantomData ; # [doc (hidden)]
pub mod interrupt { # [doc = r"Enumeration of all the interrupts"]
# [derive (Copy , Clone , Debug , PartialEq , Eq)]
# [repr (u8)]
pub enum Interrupt { # [doc = "0 - uart"]
UART = 0 , # [doc = "1 - timer0"]
TIMER0 = 1 , } unsafe impl bare_metal :: Nr for Interrupt { # [inline (always)]
fn nr (& self) -> u8 { * self as u8 } } # [derive (Debug , Copy , Clone)]
pub struct TryFromInterruptError (()) ; impl Interrupt { # [inline]
pub fn try_from (value : u8) -> Result < Self , TryFromInterruptError > { match value { 0 => Ok (Interrupt :: UART) , 1 => Ok (Interrupt :: TIMER0) , _ => Err (TryFromInterruptError (())) , } } } # [cfg (feature = "rt")]
# [macro_export]
# [doc = r" Assigns a handler to an interrupt"]
# [doc = r""]
# [doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
# [doc = r" function that will be used as the handler of that interrupt. That function"]
# [doc = r" must have signature `fn()`."]
# [doc = r""]
# [doc = r" Optionally, a third argument may be used to declare interrupt local data."]
# [doc = r" The handler will have exclusive access to these *local* variables on each"]
# [doc = r" invocation. If the third argument is used then the signature of the handler"]
# [doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
# [doc = r" passed to the macro."]
# [doc = r""]
# [doc = r" # Example"]
# [doc = r""]
# [doc = r" ``` ignore"]
# [doc = r" interrupt!(TIM2, periodic);"]
# [doc = r""]
# [doc = r" fn periodic() {"]
# [doc = r#"     print!(".");"#]
# [doc = r" }"]
# [doc = r""]
# [doc = r" interrupt!(TIM3, tick, locals: {"]
# [doc = r"     tick: bool = false;"]
# [doc = r" });"]
# [doc = r""]
# [doc = r" fn tick(locals: &mut TIM3::Locals) {"]
# [doc = r"     locals.tick = !locals.tick;"]
# [doc = r""]
# [doc = r"     if locals.tick {"]
# [doc = r#"         println!("Tick");"#]
# [doc = r"     } else {"]
# [doc = r#"         println!("Tock");"#]
# [doc = r"     }"]
# [doc = r" }"]
# [doc = r" ```"]
macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)]
mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } } } pub use self :: interrupt :: Interrupt ; # [allow (unused_imports)]
use generic :: * ; # [doc = r"Common register and bit access and modify traits"]
pub mod generic { use core :: marker ; # [doc = " Raw register type"]
pub trait RegisterSpec { # [doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
type Ux : Copy ; } # [doc = " Trait implemented by readable registers to enable the `read` method."]
# [doc = ""]
# [doc = " Registers marked with `Writable` can be also `modify`'ed."]
pub trait Readable : RegisterSpec { # [doc = " Result from a call to `read` and argument to `modify`."]
type Reader : core :: convert :: From < R < Self > > + core :: ops :: Deref < Target = R < Self > > ; } # [doc = " Trait implemented by writeable registers."]
# [doc = ""]
# [doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
# [doc = ""]
# [doc = " Registers marked with `Readable` can be also `modify`'ed."]
pub trait Writable : RegisterSpec { # [doc = " Writer type argument to `write`, et al."]
type Writer : core :: convert :: From < W < Self > > + core :: ops :: DerefMut < Target = W < Self > > ; } # [doc = " Reset value of the register."]
# [doc = ""]
# [doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
# [doc = " register by using the `reset` method."]
pub trait Resettable : RegisterSpec { # [doc = " Reset value of the register."]
fn reset_value () -> Self :: Ux ; } # [doc = " This structure provides volatile access to registers."]
pub struct Reg < REG : RegisterSpec > { register : vcell :: VolatileCell < REG :: Ux > , _marker : marker :: PhantomData < REG > , } unsafe impl < REG : RegisterSpec > Send for Reg < REG > where REG :: Ux : Send { } impl < REG : RegisterSpec > Reg < REG > { # [doc = " Returns the underlying memory address of register."]
# [doc = ""]
# [doc = " ```ignore"]
# [doc = " let reg_ptr = periph.reg.as_ptr();"]
# [doc = " ```"]
# [inline (always)]
pub fn as_ptr (& self) -> * mut REG :: Ux { self . register . as_ptr () } } impl < REG : Readable > Reg < REG > { # [doc = " Reads the contents of a `Readable` register."]
# [doc = ""]
# [doc = " You can read the raw contents of a register by using `bits`:"]
# [doc = " ```ignore"]
# [doc = " let bits = periph.reg.read().bits();"]
# [doc = " ```"]
# [doc = " or get the content of a particular field of a register:"]
# [doc = " ```ignore"]
# [doc = " let reader = periph.reg.read();"]
# [doc = " let bits = reader.field1().bits();"]
# [doc = " let flag = reader.field2().bit_is_set();"]
# [doc = " ```"]
# [inline (always)]
pub fn read (& self) -> REG :: Reader { REG :: Reader :: from (R { bits : self . register . get () , _reg : marker :: PhantomData , }) } } impl < REG : Resettable + Writable > Reg < REG > { # [doc = " Writes the reset value to `Writable` register."]
# [doc = ""]
# [doc = " Resets the register to its initial state."]
# [inline (always)]
pub fn reset (& self) { self . register . set (REG :: reset_value ()) } # [doc = " Writes bits to a `Writable` register."]
# [doc = ""]
# [doc = " You can write raw bits into a register:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
# [doc = " ```"]
# [doc = " or write only the fields you need:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.write(|w| w"]
# [doc = "     .field1().bits(newfield1bits)"]
# [doc = "     .field2().set_bit()"]
# [doc = "     .field3().variant(VARIANT)"]
# [doc = " );"]
# [doc = " ```"]
# [doc = " In the latter case, other fields will be set to their reset value."]
# [inline (always)]
pub fn write < F > (& self , f : F) where F : FnOnce (& mut REG :: Writer) -> & mut W < REG > { self . register . set (f (& mut REG :: Writer :: from (W { bits : REG :: reset_value () , _reg : marker :: PhantomData , })) . bits ,) ; } } impl < REG : Writable > Reg < REG > where REG :: Ux : Default , { # [doc = " Writes 0 to a `Writable` register."]
# [doc = ""]
# [doc = " Similar to `write`, but unused bits will contain 0."]
# [inline (always)]
pub fn write_with_zero < F > (& self , f : F) where F : FnOnce (& mut REG :: Writer) -> & mut W < REG > { self . register . set ((* f (& mut REG :: Writer :: from (W { bits : REG :: Ux :: default () , _reg : marker :: PhantomData , }))) . bits ,) ; } } impl < REG : Readable + Writable > Reg < REG > { # [doc = " Modifies the contents of the register by reading and then writing it."]
# [doc = ""]
# [doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
# [doc = " ```ignore"]
# [doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
# [doc = "    r.bits() | 3"]
# [doc = " ) });"]
# [doc = " ```"]
# [doc = " or"]
# [doc = " ```ignore"]
# [doc = " periph.reg.modify(|_, w| w"]
# [doc = "     .field1().bits(newfield1bits)"]
# [doc = "     .field2().set_bit()"]
# [doc = "     .field3().variant(VARIANT)"]
# [doc = " );"]
# [doc = " ```"]
# [doc = " Other fields will have the value they had before the call to `modify`."]
# [inline (always)]
pub fn modify < F > (& self , f : F) where for < 'w > F : FnOnce (& REG :: Reader , & 'w mut REG :: Writer) -> & 'w mut W < REG > { let bits = self . register . get () ; self . register . set (f (& REG :: Reader :: from (R { bits , _reg : marker :: PhantomData , }) , & mut REG :: Writer :: from (W { bits , _reg : marker :: PhantomData , }) ,) . bits ,) ; } } # [doc = " Register reader."]
# [doc = ""]
# [doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
# [doc = " method."]
pub struct R < REG : RegisterSpec + ? Sized > { pub (crate) bits : REG :: Ux , _reg : marker :: PhantomData < REG > , } impl < REG : RegisterSpec > R < REG > { # [doc = " Reads raw bits from register."]
# [inline (always)]
pub fn bits (& self) -> REG :: Ux { self . bits } } impl < REG : RegisterSpec , FI > PartialEq < FI > for R < REG > where REG :: Ux : PartialEq , FI : Copy + Into < REG :: Ux > , { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& (* other) . into ()) } } # [doc = " Register writer."]
# [doc = ""]
# [doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
pub struct W < REG : RegisterSpec + ? Sized > { # [doc = "Writable bits"]
pub (crate) bits : REG :: Ux , _reg : marker :: PhantomData < REG > , } impl < REG : RegisterSpec > W < REG > { # [doc = " Writes raw bits to the register."]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : REG :: Ux) -> & mut Self { self . bits = bits ; self } } # [doc = " Used if enumerated values cover not the whole range."]
# [derive (Clone , Copy , PartialEq)]
pub enum Variant < U , T > { # [doc = " Expected variant."]
Val (T) , # [doc = " Raw bits."]
Res (U) , } # [doc = " Field reader."]
# [doc = ""]
# [doc = " Result of the `read` methods of fields."]
pub struct FieldReader < U , T > { pub (crate) bits : U , _reg : marker :: PhantomData < T > , } impl < U , T > FieldReader < U , T > where U : Copy , { # [doc = " Creates a new instance of the reader."]
# [allow (unused)]
# [inline (always)]
pub (crate) fn new (bits : U) -> Self { Self { bits , _reg : marker :: PhantomData , } } # [doc = " Reads raw bits from field."]
# [inline (always)]
pub fn bits (& self) -> U { self . bits } } impl < U , T , FI > PartialEq < FI > for FieldReader < U , T > where U : PartialEq , FI : Copy + Into < U > , { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& (* other) . into ()) } } impl < FI > FieldReader < bool , FI > { # [doc = " Value of the field as raw bits."]
# [inline (always)]
pub fn bit (& self) -> bool { self . bits } # [doc = " Returns `true` if the bit is clear (0)."]
# [inline (always)]
pub fn bit_is_clear (& self) -> bool { ! self . bit () } # [doc = " Returns `true` if the bit is set (1)."]
# [inline (always)]
pub fn bit_is_set (& self) -> bool { self . bit () } } } # [doc = "CTRL"]
pub struct CTRL { _marker : PhantomData < * const () > } unsafe impl Send for CTRL { } impl CTRL { # [doc = r"Pointer to the register block"]
pub const PTR : * const ctrl :: RegisterBlock = 0x8200_0000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ctrl :: RegisterBlock { Self :: PTR } } impl Deref for CTRL { type Target = ctrl :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "CTRL"]
pub mod ctrl { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Write a ``1`` to this register to reset the SoC."]
pub reset : crate :: Reg < reset :: RESET_SPEC > , # [doc = "0x04 - Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub scratch : crate :: Reg < scratch :: SCRATCH_SPEC > , # [doc = "0x08 - Total number of Wishbone bus errors (timeouts) since start."]
pub bus_errors : crate :: Reg < bus_errors :: BUS_ERRORS_SPEC > , } # [doc = "RESET register accessor: an alias for `Reg<RESET_SPEC>`"]
pub type RESET = crate :: Reg < reset :: RESET_SPEC > ; # [doc = "Write a ``1`` to this register to reset the SoC."]
pub mod reset { # [doc = "Register `RESET` reader"]
pub struct R (crate :: R < RESET_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RESET_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < RESET_SPEC >> for R { fn from (reader : crate :: R < RESET_SPEC >) -> Self { R (reader) } } # [doc = "Register `RESET` writer"]
pub struct W (crate :: W < RESET_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RESET_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < RESET_SPEC >> for W { fn from (writer : crate :: W < RESET_SPEC >) -> Self { W (writer) } } # [doc = "Field `reset` reader - "]
pub struct RESET_R (crate :: FieldReader < bool , bool >) ; impl RESET_R { pub (crate) fn new (bits : bool) -> Self { RESET_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for RESET_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `reset` writer - "]
pub struct RESET_W < 'a > { w : & 'a mut W , } impl < 'a > RESET_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn reset (& self) -> RESET_R { RESET_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn reset (& mut self) -> RESET_W { RESET_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Write a ``1`` to this register to reset the SoC.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reset](index.html) module"]
pub struct RESET_SPEC ; impl crate :: RegisterSpec for RESET_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [reset::R](R) reader structure"]
impl crate :: Readable for RESET_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [reset::W](W) writer structure"]
impl crate :: Writable for RESET_SPEC { type Writer = W ; } # [doc = "`reset()` method sets RESET to value 0"]
impl crate :: Resettable for RESET_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "SCRATCH register accessor: an alias for `Reg<SCRATCH_SPEC>`"]
pub type SCRATCH = crate :: Reg < scratch :: SCRATCH_SPEC > ; # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub mod scratch { # [doc = "Register `SCRATCH` reader"]
pub struct R (crate :: R < SCRATCH_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < SCRATCH_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < SCRATCH_SPEC >> for R { fn from (reader : crate :: R < SCRATCH_SPEC >) -> Self { R (reader) } } # [doc = "Register `SCRATCH` writer"]
pub struct W (crate :: W < SCRATCH_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < SCRATCH_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < SCRATCH_SPEC >> for W { fn from (writer : crate :: W < SCRATCH_SPEC >) -> Self { W (writer) } } # [doc = "Field `scratch` reader - "]
pub struct SCRATCH_R (crate :: FieldReader < u32 , u32 >) ; impl SCRATCH_R { pub (crate) fn new (bits : u32) -> Self { SCRATCH_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for SCRATCH_R { type Target = crate :: FieldReader < u32 , u32 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `scratch` writer - "]
pub struct SCRATCH_W < 'a > { w : & 'a mut W , } impl < 'a > SCRATCH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& self) -> SCRATCH_R { SCRATCH_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& mut self) -> SCRATCH_W { SCRATCH_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scratch](index.html) module"]
pub struct SCRATCH_SPEC ; impl crate :: RegisterSpec for SCRATCH_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [scratch::R](R) reader structure"]
impl crate :: Readable for SCRATCH_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [scratch::W](W) writer structure"]
impl crate :: Writable for SCRATCH_SPEC { type Writer = W ; } # [doc = "`reset()` method sets SCRATCH to value 0x1234_5678"]
impl crate :: Resettable for SCRATCH_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0x1234_5678 } } } # [doc = "BUS_ERRORS register accessor: an alias for `Reg<BUS_ERRORS_SPEC>`"]
pub type BUS_ERRORS = crate :: Reg < bus_errors :: BUS_ERRORS_SPEC > ; # [doc = "Total number of Wishbone bus errors (timeouts) since start."]
pub mod bus_errors { # [doc = "Register `BUS_ERRORS` reader"]
pub struct R (crate :: R < BUS_ERRORS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < BUS_ERRORS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < BUS_ERRORS_SPEC >> for R { fn from (reader : crate :: R < BUS_ERRORS_SPEC >) -> Self { R (reader) } } # [doc = "Field `bus_errors` reader - "]
pub struct BUS_ERRORS_R (crate :: FieldReader < u32 , u32 >) ; impl BUS_ERRORS_R { pub (crate) fn new (bits : u32) -> Self { BUS_ERRORS_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for BUS_ERRORS_R { type Target = crate :: FieldReader < u32 , u32 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn bus_errors (& self) -> BUS_ERRORS_R { BUS_ERRORS_R :: new ((self . bits & 0xffff_ffff) as u32) } } # [doc = "Total number of Wishbone bus errors (timeouts) since start.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bus_errors](index.html) module"]
pub struct BUS_ERRORS_SPEC ; impl crate :: RegisterSpec for BUS_ERRORS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [bus_errors::R](R) reader structure"]
impl crate :: Readable for BUS_ERRORS_SPEC { type Reader = R ; } # [doc = "`reset()` method sets BUS_ERRORS to value 0"]
impl crate :: Resettable for BUS_ERRORS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [doc = "IDENTIFIER_MEM"]
pub struct IDENTIFIER_MEM { _marker : PhantomData < * const () > } unsafe impl Send for IDENTIFIER_MEM { } impl IDENTIFIER_MEM { # [doc = r"Pointer to the register block"]
pub const PTR : * const identifier_mem :: RegisterBlock = 0x8200_1000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const identifier_mem :: RegisterBlock { Self :: PTR } } impl Deref for IDENTIFIER_MEM { type Target = identifier_mem :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "IDENTIFIER_MEM"]
pub mod identifier_mem { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - 8 x 39-bit memory"]
pub identifier_mem : crate :: Reg < identifier_mem :: IDENTIFIER_MEM_SPEC > , } # [doc = "IDENTIFIER_MEM register accessor: an alias for `Reg<IDENTIFIER_MEM_SPEC>`"]
pub type IDENTIFIER_MEM = crate :: Reg < identifier_mem :: IDENTIFIER_MEM_SPEC > ; # [doc = "8 x 39-bit memory"]
pub mod identifier_mem { # [doc = "Register `IDENTIFIER_MEM` reader"]
pub struct R (crate :: R < IDENTIFIER_MEM_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < IDENTIFIER_MEM_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < IDENTIFIER_MEM_SPEC >> for R { fn from (reader : crate :: R < IDENTIFIER_MEM_SPEC >) -> Self { R (reader) } } # [doc = "Register `IDENTIFIER_MEM` writer"]
pub struct W (crate :: W < IDENTIFIER_MEM_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < IDENTIFIER_MEM_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < IDENTIFIER_MEM_SPEC >> for W { fn from (writer : crate :: W < IDENTIFIER_MEM_SPEC >) -> Self { W (writer) } } # [doc = "Field `identifier_mem` reader - "]
pub struct IDENTIFIER_MEM_R (crate :: FieldReader < u8 , u8 >) ; impl IDENTIFIER_MEM_R { pub (crate) fn new (bits : u8) -> Self { IDENTIFIER_MEM_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for IDENTIFIER_MEM_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `identifier_mem` writer - "]
pub struct IDENTIFIER_MEM_W < 'a > { w : & 'a mut W , } impl < 'a > IDENTIFIER_MEM_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& self) -> IDENTIFIER_MEM_R { IDENTIFIER_MEM_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& mut self) -> IDENTIFIER_MEM_W { IDENTIFIER_MEM_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "8 x 39-bit memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [identifier_mem](index.html) module"]
pub struct IDENTIFIER_MEM_SPEC ; impl crate :: RegisterSpec for IDENTIFIER_MEM_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [identifier_mem::R](R) reader structure"]
impl crate :: Readable for IDENTIFIER_MEM_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [identifier_mem::W](W) writer structure"]
impl crate :: Writable for IDENTIFIER_MEM_SPEC { type Writer = W ; } # [doc = "`reset()` method sets IDENTIFIER_MEM to value 0"]
impl crate :: Resettable for IDENTIFIER_MEM_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [doc = "UART_PHY"]
pub struct UART_PHY { _marker : PhantomData < * const () > } unsafe impl Send for UART_PHY { } impl UART_PHY { # [doc = r"Pointer to the register block"]
pub const PTR : * const uart_phy :: RegisterBlock = 0x8200_1800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const uart_phy :: RegisterBlock { Self :: PTR } } impl Deref for UART_PHY { type Target = uart_phy :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "UART_PHY"]
pub mod uart_phy { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub tuning_word : crate :: Reg < tuning_word :: TUNING_WORD_SPEC > , } # [doc = "TUNING_WORD register accessor: an alias for `Reg<TUNING_WORD_SPEC>`"]
pub type TUNING_WORD = crate :: Reg < tuning_word :: TUNING_WORD_SPEC > ; # [doc = ""]
pub mod tuning_word { # [doc = "Register `TUNING_WORD` reader"]
pub struct R (crate :: R < TUNING_WORD_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < TUNING_WORD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < TUNING_WORD_SPEC >> for R { fn from (reader : crate :: R < TUNING_WORD_SPEC >) -> Self { R (reader) } } # [doc = "Register `TUNING_WORD` writer"]
pub struct W (crate :: W < TUNING_WORD_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < TUNING_WORD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < TUNING_WORD_SPEC >> for W { fn from (writer : crate :: W < TUNING_WORD_SPEC >) -> Self { W (writer) } } # [doc = "Field `tuning_word` reader - "]
pub struct TUNING_WORD_R (crate :: FieldReader < u32 , u32 >) ; impl TUNING_WORD_R { pub (crate) fn new (bits : u32) -> Self { TUNING_WORD_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for TUNING_WORD_R { type Target = crate :: FieldReader < u32 , u32 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `tuning_word` writer - "]
pub struct TUNING_WORD_W < 'a > { w : & 'a mut W , } impl < 'a > TUNING_WORD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn tuning_word (& self) -> TUNING_WORD_R { TUNING_WORD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn tuning_word (& mut self) -> TUNING_WORD_W { TUNING_WORD_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [tuning_word](index.html) module"]
pub struct TUNING_WORD_SPEC ; impl crate :: RegisterSpec for TUNING_WORD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [tuning_word::R](R) reader structure"]
impl crate :: Readable for TUNING_WORD_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [tuning_word::W](W) writer structure"]
impl crate :: Writable for TUNING_WORD_SPEC { type Writer = W ; } # [doc = "`reset()` method sets TUNING_WORD to value 0x0096_feb4"]
impl crate :: Resettable for TUNING_WORD_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0x0096_feb4 } } } } # [doc = "UART"]
pub struct UART { _marker : PhantomData < * const () > } unsafe impl Send for UART { } impl UART { # [doc = r"Pointer to the register block"]
pub const PTR : * const uart :: RegisterBlock = 0x8200_2000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const uart :: RegisterBlock { Self :: PTR } } impl Deref for UART { type Target = uart :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "UART"]
pub mod uart { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub rxtx : crate :: Reg < rxtx :: RXTX_SPEC > , # [doc = "0x04 - "]
pub txfull : crate :: Reg < txfull :: TXFULL_SPEC > , # [doc = "0x08 - "]
pub rxempty : crate :: Reg < rxempty :: RXEMPTY_SPEC > , # [doc = "0x0c - "]
pub ev_status : crate :: Reg < ev_status :: EV_STATUS_SPEC > , # [doc = "0x10 - "]
pub ev_pending : crate :: Reg < ev_pending :: EV_PENDING_SPEC > , # [doc = "0x14 - "]
pub ev_enable : crate :: Reg < ev_enable :: EV_ENABLE_SPEC > , # [doc = "0x18 - "]
pub txempty : crate :: Reg < txempty :: TXEMPTY_SPEC > , # [doc = "0x1c - "]
pub rxfull : crate :: Reg < rxfull :: RXFULL_SPEC > , } # [doc = "RXTX register accessor: an alias for `Reg<RXTX_SPEC>`"]
pub type RXTX = crate :: Reg < rxtx :: RXTX_SPEC > ; # [doc = ""]
pub mod rxtx { # [doc = "Register `RXTX` reader"]
pub struct R (crate :: R < RXTX_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RXTX_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < RXTX_SPEC >> for R { fn from (reader : crate :: R < RXTX_SPEC >) -> Self { R (reader) } } # [doc = "Register `RXTX` writer"]
pub struct W (crate :: W < RXTX_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RXTX_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < RXTX_SPEC >> for W { fn from (writer : crate :: W < RXTX_SPEC >) -> Self { W (writer) } } # [doc = "Field `rxtx` reader - "]
pub struct RXTX_R (crate :: FieldReader < u8 , u8 >) ; impl RXTX_R { pub (crate) fn new (bits : u8) -> Self { RXTX_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for RXTX_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `rxtx` writer - "]
pub struct RXTX_W < 'a > { w : & 'a mut W , } impl < 'a > RXTX_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& self) -> RXTX_R { RXTX_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& mut self) -> RXTX_W { RXTX_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxtx](index.html) module"]
pub struct RXTX_SPEC ; impl crate :: RegisterSpec for RXTX_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [rxtx::R](R) reader structure"]
impl crate :: Readable for RXTX_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [rxtx::W](W) writer structure"]
impl crate :: Writable for RXTX_SPEC { type Writer = W ; } # [doc = "`reset()` method sets RXTX to value 0"]
impl crate :: Resettable for RXTX_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "TXFULL register accessor: an alias for `Reg<TXFULL_SPEC>`"]
pub type TXFULL = crate :: Reg < txfull :: TXFULL_SPEC > ; # [doc = ""]
pub mod txfull { # [doc = "Register `TXFULL` reader"]
pub struct R (crate :: R < TXFULL_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < TXFULL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < TXFULL_SPEC >> for R { fn from (reader : crate :: R < TXFULL_SPEC >) -> Self { R (reader) } } # [doc = "Field `txfull` reader - "]
pub struct TXFULL_R (crate :: FieldReader < bool , bool >) ; impl TXFULL_R { pub (crate) fn new (bits : bool) -> Self { TXFULL_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for TXFULL_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txfull (& self) -> TXFULL_R { TXFULL_R :: new ((self . bits & 0x01) != 0) } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txfull](index.html) module"]
pub struct TXFULL_SPEC ; impl crate :: RegisterSpec for TXFULL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [txfull::R](R) reader structure"]
impl crate :: Readable for TXFULL_SPEC { type Reader = R ; } # [doc = "`reset()` method sets TXFULL to value 0"]
impl crate :: Resettable for TXFULL_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "RXEMPTY register accessor: an alias for `Reg<RXEMPTY_SPEC>`"]
pub type RXEMPTY = crate :: Reg < rxempty :: RXEMPTY_SPEC > ; # [doc = ""]
pub mod rxempty { # [doc = "Register `RXEMPTY` reader"]
pub struct R (crate :: R < RXEMPTY_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RXEMPTY_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < RXEMPTY_SPEC >> for R { fn from (reader : crate :: R < RXEMPTY_SPEC >) -> Self { R (reader) } } # [doc = "Field `rxempty` reader - "]
pub struct RXEMPTY_R (crate :: FieldReader < bool , bool >) ; impl RXEMPTY_R { pub (crate) fn new (bits : bool) -> Self { RXEMPTY_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for RXEMPTY_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxempty (& self) -> RXEMPTY_R { RXEMPTY_R :: new ((self . bits & 0x01) != 0) } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxempty](index.html) module"]
pub struct RXEMPTY_SPEC ; impl crate :: RegisterSpec for RXEMPTY_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [rxempty::R](R) reader structure"]
impl crate :: Readable for RXEMPTY_SPEC { type Reader = R ; } # [doc = "`reset()` method sets RXEMPTY to value 0"]
impl crate :: Resettable for RXEMPTY_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EV_STATUS register accessor: an alias for `Reg<EV_STATUS_SPEC>`"]
pub type EV_STATUS = crate :: Reg < ev_status :: EV_STATUS_SPEC > ; # [doc = ""]
pub mod ev_status { # [doc = "Register `EV_STATUS` reader"]
pub struct R (crate :: R < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EV_STATUS_SPEC >> for R { fn from (reader : crate :: R < EV_STATUS_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_STATUS` writer"]
pub struct W (crate :: W < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EV_STATUS_SPEC >> for W { fn from (writer : crate :: W < EV_STATUS_SPEC >) -> Self { W (writer) } } # [doc = "Field `status` reader - "]
pub struct STATUS_R (crate :: FieldReader < u8 , u8 >) ; impl STATUS_R { pub (crate) fn new (bits : u8) -> Self { STATUS_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for STATUS_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `status` writer - "]
pub struct STATUS_W < 'a > { w : & 'a mut W , } impl < 'a > STATUS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn status (& self) -> STATUS_R { STATUS_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn status (& mut self) -> STATUS_W { STATUS_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](index.html) module"]
pub struct EV_STATUS_SPEC ; impl crate :: RegisterSpec for EV_STATUS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_status::R](R) reader structure"]
impl crate :: Readable for EV_STATUS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_status::W](W) writer structure"]
impl crate :: Writable for EV_STATUS_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EV_STATUS to value 0"]
impl crate :: Resettable for EV_STATUS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EV_PENDING register accessor: an alias for `Reg<EV_PENDING_SPEC>`"]
pub type EV_PENDING = crate :: Reg < ev_pending :: EV_PENDING_SPEC > ; # [doc = ""]
pub mod ev_pending { # [doc = "Register `EV_PENDING` reader"]
pub struct R (crate :: R < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EV_PENDING_SPEC >> for R { fn from (reader : crate :: R < EV_PENDING_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_PENDING` writer"]
pub struct W (crate :: W < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EV_PENDING_SPEC >> for W { fn from (writer : crate :: W < EV_PENDING_SPEC >) -> Self { W (writer) } } # [doc = "Field `pending` reader - "]
pub struct PENDING_R (crate :: FieldReader < u8 , u8 >) ; impl PENDING_R { pub (crate) fn new (bits : u8) -> Self { PENDING_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for PENDING_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `pending` writer - "]
pub struct PENDING_W < 'a > { w : & 'a mut W , } impl < 'a > PENDING_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn pending (& self) -> PENDING_R { PENDING_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn pending (& mut self) -> PENDING_W { PENDING_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](index.html) module"]
pub struct EV_PENDING_SPEC ; impl crate :: RegisterSpec for EV_PENDING_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_pending::R](R) reader structure"]
impl crate :: Readable for EV_PENDING_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_pending::W](W) writer structure"]
impl crate :: Writable for EV_PENDING_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EV_PENDING to value 0"]
impl crate :: Resettable for EV_PENDING_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EV_ENABLE register accessor: an alias for `Reg<EV_ENABLE_SPEC>`"]
pub type EV_ENABLE = crate :: Reg < ev_enable :: EV_ENABLE_SPEC > ; # [doc = ""]
pub mod ev_enable { # [doc = "Register `EV_ENABLE` reader"]
pub struct R (crate :: R < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EV_ENABLE_SPEC >> for R { fn from (reader : crate :: R < EV_ENABLE_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_ENABLE` writer"]
pub struct W (crate :: W < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EV_ENABLE_SPEC >> for W { fn from (writer : crate :: W < EV_ENABLE_SPEC >) -> Self { W (writer) } } # [doc = "Field `enable` reader - "]
pub struct ENABLE_R (crate :: FieldReader < u8 , u8 >) ; impl ENABLE_R { pub (crate) fn new (bits : u8) -> Self { ENABLE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for ENABLE_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `enable` writer - "]
pub struct ENABLE_W < 'a > { w : & 'a mut W , } impl < 'a > ENABLE_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn enable (& self) -> ENABLE_R { ENABLE_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn enable (& mut self) -> ENABLE_W { ENABLE_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](index.html) module"]
pub struct EV_ENABLE_SPEC ; impl crate :: RegisterSpec for EV_ENABLE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_enable::R](R) reader structure"]
impl crate :: Readable for EV_ENABLE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_enable::W](W) writer structure"]
impl crate :: Writable for EV_ENABLE_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EV_ENABLE to value 0"]
impl crate :: Resettable for EV_ENABLE_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "TXEMPTY register accessor: an alias for `Reg<TXEMPTY_SPEC>`"]
pub type TXEMPTY = crate :: Reg < txempty :: TXEMPTY_SPEC > ; # [doc = ""]
pub mod txempty { # [doc = "Register `TXEMPTY` reader"]
pub struct R (crate :: R < TXEMPTY_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < TXEMPTY_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < TXEMPTY_SPEC >> for R { fn from (reader : crate :: R < TXEMPTY_SPEC >) -> Self { R (reader) } } # [doc = "Field `txempty` reader - "]
pub struct TXEMPTY_R (crate :: FieldReader < bool , bool >) ; impl TXEMPTY_R { pub (crate) fn new (bits : bool) -> Self { TXEMPTY_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for TXEMPTY_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txempty (& self) -> TXEMPTY_R { TXEMPTY_R :: new ((self . bits & 0x01) != 0) } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txempty](index.html) module"]
pub struct TXEMPTY_SPEC ; impl crate :: RegisterSpec for TXEMPTY_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [txempty::R](R) reader structure"]
impl crate :: Readable for TXEMPTY_SPEC { type Reader = R ; } # [doc = "`reset()` method sets TXEMPTY to value 0"]
impl crate :: Resettable for TXEMPTY_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "RXFULL register accessor: an alias for `Reg<RXFULL_SPEC>`"]
pub type RXFULL = crate :: Reg < rxfull :: RXFULL_SPEC > ; # [doc = ""]
pub mod rxfull { # [doc = "Register `RXFULL` reader"]
pub struct R (crate :: R < RXFULL_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RXFULL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < RXFULL_SPEC >> for R { fn from (reader : crate :: R < RXFULL_SPEC >) -> Self { R (reader) } } # [doc = "Field `rxfull` reader - "]
pub struct RXFULL_R (crate :: FieldReader < bool , bool >) ; impl RXFULL_R { pub (crate) fn new (bits : bool) -> Self { RXFULL_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for RXFULL_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxfull (& self) -> RXFULL_R { RXFULL_R :: new ((self . bits & 0x01) != 0) } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxfull](index.html) module"]
pub struct RXFULL_SPEC ; impl crate :: RegisterSpec for RXFULL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [rxfull::R](R) reader structure"]
impl crate :: Readable for RXFULL_SPEC { type Reader = R ; } # [doc = "`reset()` method sets RXFULL to value 0"]
impl crate :: Resettable for RXFULL_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [doc = "TIMER0"]
pub struct TIMER0 { _marker : PhantomData < * const () > } unsafe impl Send for TIMER0 { } impl TIMER0 { # [doc = r"Pointer to the register block"]
pub const PTR : * const timer0 :: RegisterBlock = 0x8200_2800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const timer0 :: RegisterBlock { Self :: PTR } } impl Deref for TIMER0 { type Target = timer0 :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "TIMER0"]
pub mod timer0 { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub load : crate :: Reg < load :: LOAD_SPEC > , # [doc = "0x04 - Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub reload : crate :: Reg < reload :: RELOAD_SPEC > , # [doc = "0x08 - Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub en : crate :: Reg < en :: EN_SPEC > , # [doc = "0x0c - Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub update_value : crate :: Reg < update_value :: UPDATE_VALUE_SPEC > , # [doc = "0x10 - Latched countdown value. This value is updated by writing to ``update_value``."]
pub value : crate :: Reg < value :: VALUE_SPEC > , # [doc = "0x14 - "]
pub ev_status : crate :: Reg < ev_status :: EV_STATUS_SPEC > , # [doc = "0x18 - "]
pub ev_pending : crate :: Reg < ev_pending :: EV_PENDING_SPEC > , # [doc = "0x1c - "]
pub ev_enable : crate :: Reg < ev_enable :: EV_ENABLE_SPEC > , } # [doc = "LOAD register accessor: an alias for `Reg<LOAD_SPEC>`"]
pub type LOAD = crate :: Reg < load :: LOAD_SPEC > ; # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub mod load { # [doc = "Register `LOAD` reader"]
pub struct R (crate :: R < LOAD_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < LOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < LOAD_SPEC >> for R { fn from (reader : crate :: R < LOAD_SPEC >) -> Self { R (reader) } } # [doc = "Register `LOAD` writer"]
pub struct W (crate :: W < LOAD_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < LOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < LOAD_SPEC >> for W { fn from (writer : crate :: W < LOAD_SPEC >) -> Self { W (writer) } } # [doc = "Field `load` reader - "]
pub struct LOAD_R (crate :: FieldReader < u32 , u32 >) ; impl LOAD_R { pub (crate) fn new (bits : u32) -> Self { LOAD_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for LOAD_R { type Target = crate :: FieldReader < u32 , u32 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `load` writer - "]
pub struct LOAD_W < 'a > { w : & 'a mut W , } impl < 'a > LOAD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& self) -> LOAD_R { LOAD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& mut self) -> LOAD_W { LOAD_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [load](index.html) module"]
pub struct LOAD_SPEC ; impl crate :: RegisterSpec for LOAD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [load::R](R) reader structure"]
impl crate :: Readable for LOAD_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [load::W](W) writer structure"]
impl crate :: Writable for LOAD_SPEC { type Writer = W ; } # [doc = "`reset()` method sets LOAD to value 0"]
impl crate :: Resettable for LOAD_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "RELOAD register accessor: an alias for `Reg<RELOAD_SPEC>`"]
pub type RELOAD = crate :: Reg < reload :: RELOAD_SPEC > ; # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub mod reload { # [doc = "Register `RELOAD` reader"]
pub struct R (crate :: R < RELOAD_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < RELOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < RELOAD_SPEC >> for R { fn from (reader : crate :: R < RELOAD_SPEC >) -> Self { R (reader) } } # [doc = "Register `RELOAD` writer"]
pub struct W (crate :: W < RELOAD_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < RELOAD_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < RELOAD_SPEC >> for W { fn from (writer : crate :: W < RELOAD_SPEC >) -> Self { W (writer) } } # [doc = "Field `reload` reader - "]
pub struct RELOAD_R (crate :: FieldReader < u32 , u32 >) ; impl RELOAD_R { pub (crate) fn new (bits : u32) -> Self { RELOAD_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for RELOAD_R { type Target = crate :: FieldReader < u32 , u32 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `reload` writer - "]
pub struct RELOAD_W < 'a > { w : & 'a mut W , } impl < 'a > RELOAD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& self) -> RELOAD_R { RELOAD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& mut self) -> RELOAD_W { RELOAD_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reload](index.html) module"]
pub struct RELOAD_SPEC ; impl crate :: RegisterSpec for RELOAD_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [reload::R](R) reader structure"]
impl crate :: Readable for RELOAD_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [reload::W](W) writer structure"]
impl crate :: Writable for RELOAD_SPEC { type Writer = W ; } # [doc = "`reset()` method sets RELOAD to value 0"]
impl crate :: Resettable for RELOAD_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EN register accessor: an alias for `Reg<EN_SPEC>`"]
pub type EN = crate :: Reg < en :: EN_SPEC > ; # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub mod en { # [doc = "Register `EN` reader"]
pub struct R (crate :: R < EN_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EN_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EN_SPEC >> for R { fn from (reader : crate :: R < EN_SPEC >) -> Self { R (reader) } } # [doc = "Register `EN` writer"]
pub struct W (crate :: W < EN_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EN_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EN_SPEC >> for W { fn from (writer : crate :: W < EN_SPEC >) -> Self { W (writer) } } # [doc = "Field `en` reader - "]
pub struct EN_R (crate :: FieldReader < bool , bool >) ; impl EN_R { pub (crate) fn new (bits : bool) -> Self { EN_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for EN_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `en` writer - "]
pub struct EN_W < 'a > { w : & 'a mut W , } impl < 'a > EN_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& self) -> EN_R { EN_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& mut self) -> EN_W { EN_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [en](index.html) module"]
pub struct EN_SPEC ; impl crate :: RegisterSpec for EN_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [en::R](R) reader structure"]
impl crate :: Readable for EN_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [en::W](W) writer structure"]
impl crate :: Writable for EN_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EN to value 0"]
impl crate :: Resettable for EN_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "UPDATE_VALUE register accessor: an alias for `Reg<UPDATE_VALUE_SPEC>`"]
pub type UPDATE_VALUE = crate :: Reg < update_value :: UPDATE_VALUE_SPEC > ; # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub mod update_value { # [doc = "Register `UPDATE_VALUE` reader"]
pub struct R (crate :: R < UPDATE_VALUE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < UPDATE_VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < UPDATE_VALUE_SPEC >> for R { fn from (reader : crate :: R < UPDATE_VALUE_SPEC >) -> Self { R (reader) } } # [doc = "Register `UPDATE_VALUE` writer"]
pub struct W (crate :: W < UPDATE_VALUE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < UPDATE_VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < UPDATE_VALUE_SPEC >> for W { fn from (writer : crate :: W < UPDATE_VALUE_SPEC >) -> Self { W (writer) } } # [doc = "Field `update_value` reader - "]
pub struct UPDATE_VALUE_R (crate :: FieldReader < bool , bool >) ; impl UPDATE_VALUE_R { pub (crate) fn new (bits : bool) -> Self { UPDATE_VALUE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for UPDATE_VALUE_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `update_value` writer - "]
pub struct UPDATE_VALUE_W < 'a > { w : & 'a mut W , } impl < 'a > UPDATE_VALUE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& self) -> UPDATE_VALUE_R { UPDATE_VALUE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& mut self) -> UPDATE_VALUE_W { UPDATE_VALUE_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [update_value](index.html) module"]
pub struct UPDATE_VALUE_SPEC ; impl crate :: RegisterSpec for UPDATE_VALUE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [update_value::R](R) reader structure"]
impl crate :: Readable for UPDATE_VALUE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [update_value::W](W) writer structure"]
impl crate :: Writable for UPDATE_VALUE_SPEC { type Writer = W ; } # [doc = "`reset()` method sets UPDATE_VALUE to value 0"]
impl crate :: Resettable for UPDATE_VALUE_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "VALUE register accessor: an alias for `Reg<VALUE_SPEC>`"]
pub type VALUE = crate :: Reg < value :: VALUE_SPEC > ; # [doc = "Latched countdown value. This value is updated by writing to ``update_value``."]
pub mod value { # [doc = "Register `VALUE` reader"]
pub struct R (crate :: R < VALUE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < VALUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < VALUE_SPEC >> for R { fn from (reader : crate :: R < VALUE_SPEC >) -> Self { R (reader) } } # [doc = "Field `value` reader - "]
pub struct VALUE_R (crate :: FieldReader < u32 , u32 >) ; impl VALUE_R { pub (crate) fn new (bits : u32) -> Self { VALUE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for VALUE_R { type Target = crate :: FieldReader < u32 , u32 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn value (& self) -> VALUE_R { VALUE_R :: new ((self . bits & 0xffff_ffff) as u32) } } # [doc = "Latched countdown value. This value is updated by writing to ``update_value``.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [value](index.html) module"]
pub struct VALUE_SPEC ; impl crate :: RegisterSpec for VALUE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [value::R](R) reader structure"]
impl crate :: Readable for VALUE_SPEC { type Reader = R ; } # [doc = "`reset()` method sets VALUE to value 0"]
impl crate :: Resettable for VALUE_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EV_STATUS register accessor: an alias for `Reg<EV_STATUS_SPEC>`"]
pub type EV_STATUS = crate :: Reg < ev_status :: EV_STATUS_SPEC > ; # [doc = ""]
pub mod ev_status { # [doc = "Register `EV_STATUS` reader"]
pub struct R (crate :: R < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EV_STATUS_SPEC >> for R { fn from (reader : crate :: R < EV_STATUS_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_STATUS` writer"]
pub struct W (crate :: W < EV_STATUS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EV_STATUS_SPEC >> for W { fn from (writer : crate :: W < EV_STATUS_SPEC >) -> Self { W (writer) } } # [doc = "Field `status` reader - "]
pub struct STATUS_R (crate :: FieldReader < bool , bool >) ; impl STATUS_R { pub (crate) fn new (bits : bool) -> Self { STATUS_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for STATUS_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `status` writer - "]
pub struct STATUS_W < 'a > { w : & 'a mut W , } impl < 'a > STATUS_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn status (& self) -> STATUS_R { STATUS_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn status (& mut self) -> STATUS_W { STATUS_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](index.html) module"]
pub struct EV_STATUS_SPEC ; impl crate :: RegisterSpec for EV_STATUS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_status::R](R) reader structure"]
impl crate :: Readable for EV_STATUS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_status::W](W) writer structure"]
impl crate :: Writable for EV_STATUS_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EV_STATUS to value 0"]
impl crate :: Resettable for EV_STATUS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EV_PENDING register accessor: an alias for `Reg<EV_PENDING_SPEC>`"]
pub type EV_PENDING = crate :: Reg < ev_pending :: EV_PENDING_SPEC > ; # [doc = ""]
pub mod ev_pending { # [doc = "Register `EV_PENDING` reader"]
pub struct R (crate :: R < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EV_PENDING_SPEC >> for R { fn from (reader : crate :: R < EV_PENDING_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_PENDING` writer"]
pub struct W (crate :: W < EV_PENDING_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_PENDING_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EV_PENDING_SPEC >> for W { fn from (writer : crate :: W < EV_PENDING_SPEC >) -> Self { W (writer) } } # [doc = "Field `pending` reader - "]
pub struct PENDING_R (crate :: FieldReader < bool , bool >) ; impl PENDING_R { pub (crate) fn new (bits : bool) -> Self { PENDING_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for PENDING_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `pending` writer - "]
pub struct PENDING_W < 'a > { w : & 'a mut W , } impl < 'a > PENDING_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn pending (& self) -> PENDING_R { PENDING_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn pending (& mut self) -> PENDING_W { PENDING_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](index.html) module"]
pub struct EV_PENDING_SPEC ; impl crate :: RegisterSpec for EV_PENDING_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_pending::R](R) reader structure"]
impl crate :: Readable for EV_PENDING_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_pending::W](W) writer structure"]
impl crate :: Writable for EV_PENDING_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EV_PENDING to value 0"]
impl crate :: Resettable for EV_PENDING_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "EV_ENABLE register accessor: an alias for `Reg<EV_ENABLE_SPEC>`"]
pub type EV_ENABLE = crate :: Reg < ev_enable :: EV_ENABLE_SPEC > ; # [doc = ""]
pub mod ev_enable { # [doc = "Register `EV_ENABLE` reader"]
pub struct R (crate :: R < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < EV_ENABLE_SPEC >> for R { fn from (reader : crate :: R < EV_ENABLE_SPEC >) -> Self { R (reader) } } # [doc = "Register `EV_ENABLE` writer"]
pub struct W (crate :: W < EV_ENABLE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < EV_ENABLE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < EV_ENABLE_SPEC >> for W { fn from (writer : crate :: W < EV_ENABLE_SPEC >) -> Self { W (writer) } } # [doc = "Field `enable` reader - "]
pub struct ENABLE_R (crate :: FieldReader < bool , bool >) ; impl ENABLE_R { pub (crate) fn new (bits : bool) -> Self { ENABLE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for ENABLE_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `enable` writer - "]
pub struct ENABLE_W < 'a > { w : & 'a mut W , } impl < 'a > ENABLE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn enable (& self) -> ENABLE_R { ENABLE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn enable (& mut self) -> ENABLE_W { ENABLE_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](index.html) module"]
pub struct EV_ENABLE_SPEC ; impl crate :: RegisterSpec for EV_ENABLE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [ev_enable::R](R) reader structure"]
impl crate :: Readable for EV_ENABLE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [ev_enable::W](W) writer structure"]
impl crate :: Writable for EV_ENABLE_SPEC { type Writer = W ; } # [doc = "`reset()` method sets EV_ENABLE to value 0"]
impl crate :: Resettable for EV_ENABLE_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [doc = "SDRAM"]
pub struct SDRAM { _marker : PhantomData < * const () > } unsafe impl Send for SDRAM { } impl SDRAM { # [doc = r"Pointer to the register block"]
pub const PTR : * const sdram :: RegisterBlock = 0x8200_3000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const sdram :: RegisterBlock { Self :: PTR } } impl Deref for SDRAM { type Target = sdram :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "SDRAM"]
pub mod sdram { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub dfii_control : crate :: Reg < dfii_control :: DFII_CONTROL_SPEC > , # [doc = "0x04 - "]
pub dfii_pi0_command : crate :: Reg < dfii_pi0_command :: DFII_PI0_COMMAND_SPEC > , # [doc = "0x08 - "]
pub dfii_pi0_command_issue : crate :: Reg < dfii_pi0_command_issue :: DFII_PI0_COMMAND_ISSUE_SPEC > , # [doc = "0x0c - "]
pub dfii_pi0_address : crate :: Reg < dfii_pi0_address :: DFII_PI0_ADDRESS_SPEC > , # [doc = "0x10 - "]
pub dfii_pi0_baddress : crate :: Reg < dfii_pi0_baddress :: DFII_PI0_BADDRESS_SPEC > , # [doc = "0x14 - "]
pub dfii_pi0_wrdata : crate :: Reg < dfii_pi0_wrdata :: DFII_PI0_WRDATA_SPEC > , # [doc = "0x18 - "]
pub dfii_pi0_rddata : crate :: Reg < dfii_pi0_rddata :: DFII_PI0_RDDATA_SPEC > , } # [doc = "DFII_CONTROL register accessor: an alias for `Reg<DFII_CONTROL_SPEC>`"]
pub type DFII_CONTROL = crate :: Reg < dfii_control :: DFII_CONTROL_SPEC > ; # [doc = ""]
pub mod dfii_control { # [doc = "Register `DFII_CONTROL` reader"]
pub struct R (crate :: R < DFII_CONTROL_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_CONTROL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_CONTROL_SPEC >> for R { fn from (reader : crate :: R < DFII_CONTROL_SPEC >) -> Self { R (reader) } } # [doc = "Register `DFII_CONTROL` writer"]
pub struct W (crate :: W < DFII_CONTROL_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DFII_CONTROL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < DFII_CONTROL_SPEC >> for W { fn from (writer : crate :: W < DFII_CONTROL_SPEC >) -> Self { W (writer) } } # [doc = "Field `sel` reader - None"]
pub struct SEL_R (crate :: FieldReader < bool , bool >) ; impl SEL_R { pub (crate) fn new (bits : bool) -> Self { SEL_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for SEL_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `sel` writer - None"]
pub struct SEL_W < 'a > { w : & 'a mut W , } impl < 'a > SEL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Field `cke` reader - None"]
pub struct CKE_R (crate :: FieldReader < bool , bool >) ; impl CKE_R { pub (crate) fn new (bits : bool) -> Self { CKE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for CKE_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `cke` writer - None"]
pub struct CKE_W < 'a > { w : & 'a mut W , } impl < 'a > CKE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } # [doc = "Field `odt` reader - None"]
pub struct ODT_R (crate :: FieldReader < bool , bool >) ; impl ODT_R { pub (crate) fn new (bits : bool) -> Self { ODT_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for ODT_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `odt` writer - None"]
pub struct ODT_W < 'a > { w : & 'a mut W , } impl < 'a > ODT_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 2)) | (((value as u32) & 0x01) << 2) ; self . w } } # [doc = "Field `reset_n` reader - None"]
pub struct RESET_N_R (crate :: FieldReader < bool , bool >) ; impl RESET_N_R { pub (crate) fn new (bits : bool) -> Self { RESET_N_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for RESET_N_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `reset_n` writer - None"]
pub struct RESET_N_W < 'a > { w : & 'a mut W , } impl < 'a > RESET_N_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 3)) | (((value as u32) & 0x01) << 3) ; self . w } } impl R { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn sel (& self) -> SEL_R { SEL_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn cke (& self) -> CKE_R { CKE_R :: new (((self . bits >> 1) & 0x01) != 0) } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn odt (& self) -> ODT_R { ODT_R :: new (((self . bits >> 2) & 0x01) != 0) } # [doc = "Bit 3 - None"]
# [inline (always)]
pub fn reset_n (& self) -> RESET_N_R { RESET_N_R :: new (((self . bits >> 3) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn sel (& mut self) -> SEL_W { SEL_W { w : self } } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn cke (& mut self) -> CKE_W { CKE_W { w : self } } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn odt (& mut self) -> ODT_W { ODT_W { w : self } } # [doc = "Bit 3 - None"]
# [inline (always)]
pub fn reset_n (& mut self) -> RESET_N_W { RESET_N_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_control](index.html) module"]
pub struct DFII_CONTROL_SPEC ; impl crate :: RegisterSpec for DFII_CONTROL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_control::R](R) reader structure"]
impl crate :: Readable for DFII_CONTROL_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dfii_control::W](W) writer structure"]
impl crate :: Writable for DFII_CONTROL_SPEC { type Writer = W ; } # [doc = "`reset()` method sets DFII_CONTROL to value 0x01"]
impl crate :: Resettable for DFII_CONTROL_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0x01 } } } # [doc = "DFII_PI0_COMMAND register accessor: an alias for `Reg<DFII_PI0_COMMAND_SPEC>`"]
pub type DFII_PI0_COMMAND = crate :: Reg < dfii_pi0_command :: DFII_PI0_COMMAND_SPEC > ; # [doc = ""]
pub mod dfii_pi0_command { # [doc = "Register `DFII_PI0_COMMAND` reader"]
pub struct R (crate :: R < DFII_PI0_COMMAND_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_PI0_COMMAND_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_PI0_COMMAND_SPEC >> for R { fn from (reader : crate :: R < DFII_PI0_COMMAND_SPEC >) -> Self { R (reader) } } # [doc = "Register `DFII_PI0_COMMAND` writer"]
pub struct W (crate :: W < DFII_PI0_COMMAND_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DFII_PI0_COMMAND_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < DFII_PI0_COMMAND_SPEC >> for W { fn from (writer : crate :: W < DFII_PI0_COMMAND_SPEC >) -> Self { W (writer) } } # [doc = "Field `dfii_pi0_command` reader - "]
pub struct DFII_PI0_COMMAND_R (crate :: FieldReader < u8 , u8 >) ; impl DFII_PI0_COMMAND_R { pub (crate) fn new (bits : u8) -> Self { DFII_PI0_COMMAND_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DFII_PI0_COMMAND_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `dfii_pi0_command` writer - "]
pub struct DFII_PI0_COMMAND_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_COMMAND_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x3f) | ((value as u32) & 0x3f) ; self . w } } impl R { # [doc = "Bits 0:5"]
# [inline (always)]
pub fn dfii_pi0_command (& self) -> DFII_PI0_COMMAND_R { DFII_PI0_COMMAND_R :: new ((self . bits & 0x3f) as u8) } } impl W { # [doc = "Bits 0:5"]
# [inline (always)]
pub fn dfii_pi0_command (& mut self) -> DFII_PI0_COMMAND_W { DFII_PI0_COMMAND_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_command](index.html) module"]
pub struct DFII_PI0_COMMAND_SPEC ; impl crate :: RegisterSpec for DFII_PI0_COMMAND_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_pi0_command::R](R) reader structure"]
impl crate :: Readable for DFII_PI0_COMMAND_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dfii_pi0_command::W](W) writer structure"]
impl crate :: Writable for DFII_PI0_COMMAND_SPEC { type Writer = W ; } # [doc = "`reset()` method sets DFII_PI0_COMMAND to value 0"]
impl crate :: Resettable for DFII_PI0_COMMAND_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "DFII_PI0_COMMAND_ISSUE register accessor: an alias for `Reg<DFII_PI0_COMMAND_ISSUE_SPEC>`"]
pub type DFII_PI0_COMMAND_ISSUE = crate :: Reg < dfii_pi0_command_issue :: DFII_PI0_COMMAND_ISSUE_SPEC > ; # [doc = ""]
pub mod dfii_pi0_command_issue { # [doc = "Register `DFII_PI0_COMMAND_ISSUE` reader"]
pub struct R (crate :: R < DFII_PI0_COMMAND_ISSUE_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_PI0_COMMAND_ISSUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_PI0_COMMAND_ISSUE_SPEC >> for R { fn from (reader : crate :: R < DFII_PI0_COMMAND_ISSUE_SPEC >) -> Self { R (reader) } } # [doc = "Register `DFII_PI0_COMMAND_ISSUE` writer"]
pub struct W (crate :: W < DFII_PI0_COMMAND_ISSUE_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DFII_PI0_COMMAND_ISSUE_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < DFII_PI0_COMMAND_ISSUE_SPEC >> for W { fn from (writer : crate :: W < DFII_PI0_COMMAND_ISSUE_SPEC >) -> Self { W (writer) } } # [doc = "Field `dfii_pi0_command_issue` reader - "]
pub struct DFII_PI0_COMMAND_ISSUE_R (crate :: FieldReader < bool , bool >) ; impl DFII_PI0_COMMAND_ISSUE_R { pub (crate) fn new (bits : bool) -> Self { DFII_PI0_COMMAND_ISSUE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DFII_PI0_COMMAND_ISSUE_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `dfii_pi0_command_issue` writer - "]
pub struct DFII_PI0_COMMAND_ISSUE_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_COMMAND_ISSUE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_command_issue (& self) -> DFII_PI0_COMMAND_ISSUE_R { DFII_PI0_COMMAND_ISSUE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_command_issue (& mut self) -> DFII_PI0_COMMAND_ISSUE_W { DFII_PI0_COMMAND_ISSUE_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_command_issue](index.html) module"]
pub struct DFII_PI0_COMMAND_ISSUE_SPEC ; impl crate :: RegisterSpec for DFII_PI0_COMMAND_ISSUE_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_pi0_command_issue::R](R) reader structure"]
impl crate :: Readable for DFII_PI0_COMMAND_ISSUE_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dfii_pi0_command_issue::W](W) writer structure"]
impl crate :: Writable for DFII_PI0_COMMAND_ISSUE_SPEC { type Writer = W ; } # [doc = "`reset()` method sets DFII_PI0_COMMAND_ISSUE to value 0"]
impl crate :: Resettable for DFII_PI0_COMMAND_ISSUE_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "DFII_PI0_ADDRESS register accessor: an alias for `Reg<DFII_PI0_ADDRESS_SPEC>`"]
pub type DFII_PI0_ADDRESS = crate :: Reg < dfii_pi0_address :: DFII_PI0_ADDRESS_SPEC > ; # [doc = ""]
pub mod dfii_pi0_address { # [doc = "Register `DFII_PI0_ADDRESS` reader"]
pub struct R (crate :: R < DFII_PI0_ADDRESS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_PI0_ADDRESS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_PI0_ADDRESS_SPEC >> for R { fn from (reader : crate :: R < DFII_PI0_ADDRESS_SPEC >) -> Self { R (reader) } } # [doc = "Register `DFII_PI0_ADDRESS` writer"]
pub struct W (crate :: W < DFII_PI0_ADDRESS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DFII_PI0_ADDRESS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < DFII_PI0_ADDRESS_SPEC >> for W { fn from (writer : crate :: W < DFII_PI0_ADDRESS_SPEC >) -> Self { W (writer) } } # [doc = "Field `dfii_pi0_address` reader - "]
pub struct DFII_PI0_ADDRESS_R (crate :: FieldReader < u16 , u16 >) ; impl DFII_PI0_ADDRESS_R { pub (crate) fn new (bits : u16) -> Self { DFII_PI0_ADDRESS_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DFII_PI0_ADDRESS_R { type Target = crate :: FieldReader < u16 , u16 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `dfii_pi0_address` writer - "]
pub struct DFII_PI0_ADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_ADDRESS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x1fff) | ((value as u32) & 0x1fff) ; self . w } } impl R { # [doc = "Bits 0:12"]
# [inline (always)]
pub fn dfii_pi0_address (& self) -> DFII_PI0_ADDRESS_R { DFII_PI0_ADDRESS_R :: new ((self . bits & 0x1fff) as u16) } } impl W { # [doc = "Bits 0:12"]
# [inline (always)]
pub fn dfii_pi0_address (& mut self) -> DFII_PI0_ADDRESS_W { DFII_PI0_ADDRESS_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_address](index.html) module"]
pub struct DFII_PI0_ADDRESS_SPEC ; impl crate :: RegisterSpec for DFII_PI0_ADDRESS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_pi0_address::R](R) reader structure"]
impl crate :: Readable for DFII_PI0_ADDRESS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dfii_pi0_address::W](W) writer structure"]
impl crate :: Writable for DFII_PI0_ADDRESS_SPEC { type Writer = W ; } # [doc = "`reset()` method sets DFII_PI0_ADDRESS to value 0"]
impl crate :: Resettable for DFII_PI0_ADDRESS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "DFII_PI0_BADDRESS register accessor: an alias for `Reg<DFII_PI0_BADDRESS_SPEC>`"]
pub type DFII_PI0_BADDRESS = crate :: Reg < dfii_pi0_baddress :: DFII_PI0_BADDRESS_SPEC > ; # [doc = ""]
pub mod dfii_pi0_baddress { # [doc = "Register `DFII_PI0_BADDRESS` reader"]
pub struct R (crate :: R < DFII_PI0_BADDRESS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_PI0_BADDRESS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_PI0_BADDRESS_SPEC >> for R { fn from (reader : crate :: R < DFII_PI0_BADDRESS_SPEC >) -> Self { R (reader) } } # [doc = "Register `DFII_PI0_BADDRESS` writer"]
pub struct W (crate :: W < DFII_PI0_BADDRESS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DFII_PI0_BADDRESS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < DFII_PI0_BADDRESS_SPEC >> for W { fn from (writer : crate :: W < DFII_PI0_BADDRESS_SPEC >) -> Self { W (writer) } } # [doc = "Field `dfii_pi0_baddress` reader - "]
pub struct DFII_PI0_BADDRESS_R (crate :: FieldReader < u8 , u8 >) ; impl DFII_PI0_BADDRESS_R { pub (crate) fn new (bits : u8) -> Self { DFII_PI0_BADDRESS_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DFII_PI0_BADDRESS_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `dfii_pi0_baddress` writer - "]
pub struct DFII_PI0_BADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_BADDRESS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn dfii_pi0_baddress (& self) -> DFII_PI0_BADDRESS_R { DFII_PI0_BADDRESS_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn dfii_pi0_baddress (& mut self) -> DFII_PI0_BADDRESS_W { DFII_PI0_BADDRESS_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_baddress](index.html) module"]
pub struct DFII_PI0_BADDRESS_SPEC ; impl crate :: RegisterSpec for DFII_PI0_BADDRESS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_pi0_baddress::R](R) reader structure"]
impl crate :: Readable for DFII_PI0_BADDRESS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dfii_pi0_baddress::W](W) writer structure"]
impl crate :: Writable for DFII_PI0_BADDRESS_SPEC { type Writer = W ; } # [doc = "`reset()` method sets DFII_PI0_BADDRESS to value 0"]
impl crate :: Resettable for DFII_PI0_BADDRESS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "DFII_PI0_WRDATA register accessor: an alias for `Reg<DFII_PI0_WRDATA_SPEC>`"]
pub type DFII_PI0_WRDATA = crate :: Reg < dfii_pi0_wrdata :: DFII_PI0_WRDATA_SPEC > ; # [doc = ""]
pub mod dfii_pi0_wrdata { # [doc = "Register `DFII_PI0_WRDATA` reader"]
pub struct R (crate :: R < DFII_PI0_WRDATA_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_PI0_WRDATA_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_PI0_WRDATA_SPEC >> for R { fn from (reader : crate :: R < DFII_PI0_WRDATA_SPEC >) -> Self { R (reader) } } # [doc = "Register `DFII_PI0_WRDATA` writer"]
pub struct W (crate :: W < DFII_PI0_WRDATA_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < DFII_PI0_WRDATA_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < DFII_PI0_WRDATA_SPEC >> for W { fn from (writer : crate :: W < DFII_PI0_WRDATA_SPEC >) -> Self { W (writer) } } # [doc = "Field `dfii_pi0_wrdata` reader - "]
pub struct DFII_PI0_WRDATA_R (crate :: FieldReader < u16 , u16 >) ; impl DFII_PI0_WRDATA_R { pub (crate) fn new (bits : u16) -> Self { DFII_PI0_WRDATA_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DFII_PI0_WRDATA_R { type Target = crate :: FieldReader < u16 , u16 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `dfii_pi0_wrdata` writer - "]
pub struct DFII_PI0_WRDATA_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_WRDATA_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff) | ((value as u32) & 0xffff) ; self . w } } impl R { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_wrdata (& self) -> DFII_PI0_WRDATA_R { DFII_PI0_WRDATA_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_wrdata (& mut self) -> DFII_PI0_WRDATA_W { DFII_PI0_WRDATA_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_wrdata](index.html) module"]
pub struct DFII_PI0_WRDATA_SPEC ; impl crate :: RegisterSpec for DFII_PI0_WRDATA_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_pi0_wrdata::R](R) reader structure"]
impl crate :: Readable for DFII_PI0_WRDATA_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [dfii_pi0_wrdata::W](W) writer structure"]
impl crate :: Writable for DFII_PI0_WRDATA_SPEC { type Writer = W ; } # [doc = "`reset()` method sets DFII_PI0_WRDATA to value 0"]
impl crate :: Resettable for DFII_PI0_WRDATA_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "DFII_PI0_RDDATA register accessor: an alias for `Reg<DFII_PI0_RDDATA_SPEC>`"]
pub type DFII_PI0_RDDATA = crate :: Reg < dfii_pi0_rddata :: DFII_PI0_RDDATA_SPEC > ; # [doc = ""]
pub mod dfii_pi0_rddata { # [doc = "Register `DFII_PI0_RDDATA` reader"]
pub struct R (crate :: R < DFII_PI0_RDDATA_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < DFII_PI0_RDDATA_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < DFII_PI0_RDDATA_SPEC >> for R { fn from (reader : crate :: R < DFII_PI0_RDDATA_SPEC >) -> Self { R (reader) } } # [doc = "Field `dfii_pi0_rddata` reader - "]
pub struct DFII_PI0_RDDATA_R (crate :: FieldReader < u16 , u16 >) ; impl DFII_PI0_RDDATA_R { pub (crate) fn new (bits : u16) -> Self { DFII_PI0_RDDATA_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DFII_PI0_RDDATA_R { type Target = crate :: FieldReader < u16 , u16 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_rddata (& self) -> DFII_PI0_RDDATA_R { DFII_PI0_RDDATA_R :: new ((self . bits & 0xffff) as u16) } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_rddata](index.html) module"]
pub struct DFII_PI0_RDDATA_SPEC ; impl crate :: RegisterSpec for DFII_PI0_RDDATA_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [dfii_pi0_rddata::R](R) reader structure"]
impl crate :: Readable for DFII_PI0_RDDATA_SPEC { type Reader = R ; } # [doc = "`reset()` method sets DFII_PI0_RDDATA to value 0"]
impl crate :: Resettable for DFII_PI0_RDDATA_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [doc = "LEDS"]
pub struct LEDS { _marker : PhantomData < * const () > } unsafe impl Send for LEDS { } impl LEDS { # [doc = r"Pointer to the register block"]
pub const PTR : * const leds :: RegisterBlock = 0x8200_3800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const leds :: RegisterBlock { Self :: PTR } } impl Deref for LEDS { type Target = leds :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "LEDS"]
pub mod leds { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Led Output(s) Control."]
pub out : crate :: Reg < out :: OUT_SPEC > , } # [doc = "OUT register accessor: an alias for `Reg<OUT_SPEC>`"]
pub type OUT = crate :: Reg < out :: OUT_SPEC > ; # [doc = "Led Output(s) Control."]
pub mod out { # [doc = "Register `OUT` reader"]
pub struct R (crate :: R < OUT_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < OUT_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < OUT_SPEC >> for R { fn from (reader : crate :: R < OUT_SPEC >) -> Self { R (reader) } } # [doc = "Register `OUT` writer"]
pub struct W (crate :: W < OUT_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < OUT_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < OUT_SPEC >> for W { fn from (writer : crate :: W < OUT_SPEC >) -> Self { W (writer) } } # [doc = "Field `out` reader - "]
pub struct OUT_R (crate :: FieldReader < u8 , u8 >) ; impl OUT_R { pub (crate) fn new (bits : u8) -> Self { OUT_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for OUT_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `out` writer - "]
pub struct OUT_W < 'a > { w : & 'a mut W , } impl < 'a > OUT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn out (& self) -> OUT_R { OUT_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn out (& mut self) -> OUT_W { OUT_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Led Output(s) Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out](index.html) module"]
pub struct OUT_SPEC ; impl crate :: RegisterSpec for OUT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [out::R](R) reader structure"]
impl crate :: Readable for OUT_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [out::W](W) writer structure"]
impl crate :: Writable for OUT_SPEC { type Writer = W ; } # [doc = "`reset()` method sets OUT to value 0"]
impl crate :: Resettable for OUT_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [doc = "OLED_SPI"]
pub struct OLED_SPI { _marker : PhantomData < * const () > } unsafe impl Send for OLED_SPI { } impl OLED_SPI { # [doc = r"Pointer to the register block"]
pub const PTR : * const oled_spi :: RegisterBlock = 0x8200_4000 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const oled_spi :: RegisterBlock { Self :: PTR } } impl Deref for OLED_SPI { type Target = oled_spi :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "OLED_SPI"]
pub mod oled_spi { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - SPI Control."]
pub control : crate :: Reg < control :: CONTROL_SPEC > , # [doc = "0x04 - SPI Status."]
pub status : crate :: Reg < status :: STATUS_SPEC > , # [doc = "0x08 - SPI MOSI data (MSB-first serialization)."]
pub mosi : crate :: Reg < mosi :: MOSI_SPEC > , # [doc = "0x0c - SPI MISO data (MSB-first de-serialization)."]
pub miso : crate :: Reg < miso :: MISO_SPEC > , # [doc = "0x10 - SPI Chip Select."]
pub cs : crate :: Reg < cs :: CS_SPEC > , # [doc = "0x14 - SPI loopback mode. Write ``1`` to enable MOSI to MISO internal loopback."]
pub loopback : crate :: Reg < loopback :: LOOPBACK_SPEC > , # [doc = "0x18 - SPI Clk Divider."]
pub clk_divider : crate :: Reg < clk_divider :: CLK_DIVIDER_SPEC > , } # [doc = "CONTROL register accessor: an alias for `Reg<CONTROL_SPEC>`"]
pub type CONTROL = crate :: Reg < control :: CONTROL_SPEC > ; # [doc = "SPI Control."]
pub mod control { # [doc = "Register `CONTROL` reader"]
pub struct R (crate :: R < CONTROL_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CONTROL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < CONTROL_SPEC >> for R { fn from (reader : crate :: R < CONTROL_SPEC >) -> Self { R (reader) } } # [doc = "Register `CONTROL` writer"]
pub struct W (crate :: W < CONTROL_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CONTROL_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < CONTROL_SPEC >> for W { fn from (writer : crate :: W < CONTROL_SPEC >) -> Self { W (writer) } } # [doc = "Field `start` reader - Write ``1`` to start SPI Xfer"]
pub struct START_R (crate :: FieldReader < bool , bool >) ; impl START_R { pub (crate) fn new (bits : bool) -> Self { START_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for START_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `start` writer - Write ``1`` to start SPI Xfer"]
pub struct START_W < 'a > { w : & 'a mut W , } impl < 'a > START_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Field `length` reader - SPI Xfer length (in bits)."]
pub struct LENGTH_R (crate :: FieldReader < u8 , u8 >) ; impl LENGTH_R { pub (crate) fn new (bits : u8) -> Self { LENGTH_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for LENGTH_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `length` writer - SPI Xfer length (in bits)."]
pub struct LENGTH_W < 'a > { w : & 'a mut W , } impl < 'a > LENGTH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } impl R { # [doc = "Bit 0 - Write ``1`` to start SPI Xfer"]
# [inline (always)]
pub fn start (& self) -> START_R { START_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bits 8:15 - SPI Xfer length (in bits)."]
# [inline (always)]
pub fn length (& self) -> LENGTH_R { LENGTH_R :: new (((self . bits >> 8) & 0xff) as u8) } } impl W { # [doc = "Bit 0 - Write ``1`` to start SPI Xfer"]
# [inline (always)]
pub fn start (& mut self) -> START_W { START_W { w : self } } # [doc = "Bits 8:15 - SPI Xfer length (in bits)."]
# [inline (always)]
pub fn length (& mut self) -> LENGTH_W { LENGTH_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "SPI Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [control](index.html) module"]
pub struct CONTROL_SPEC ; impl crate :: RegisterSpec for CONTROL_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [control::R](R) reader structure"]
impl crate :: Readable for CONTROL_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [control::W](W) writer structure"]
impl crate :: Writable for CONTROL_SPEC { type Writer = W ; } # [doc = "`reset()` method sets CONTROL to value 0"]
impl crate :: Resettable for CONTROL_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "STATUS register accessor: an alias for `Reg<STATUS_SPEC>`"]
pub type STATUS = crate :: Reg < status :: STATUS_SPEC > ; # [doc = "SPI Status."]
pub mod status { # [doc = "Register `STATUS` reader"]
pub struct R (crate :: R < STATUS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < STATUS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < STATUS_SPEC >> for R { fn from (reader : crate :: R < STATUS_SPEC >) -> Self { R (reader) } } # [doc = "Field `done` reader - SPI Xfer done when read as ``1``."]
pub struct DONE_R (crate :: FieldReader < bool , bool >) ; impl DONE_R { pub (crate) fn new (bits : bool) -> Self { DONE_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for DONE_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bit 0 - SPI Xfer done when read as ``1``."]
# [inline (always)]
pub fn done (& self) -> DONE_R { DONE_R :: new ((self . bits & 0x01) != 0) } } # [doc = "SPI Status.\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status](index.html) module"]
pub struct STATUS_SPEC ; impl crate :: RegisterSpec for STATUS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [status::R](R) reader structure"]
impl crate :: Readable for STATUS_SPEC { type Reader = R ; } # [doc = "`reset()` method sets STATUS to value 0"]
impl crate :: Resettable for STATUS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "MOSI register accessor: an alias for `Reg<MOSI_SPEC>`"]
pub type MOSI = crate :: Reg < mosi :: MOSI_SPEC > ; # [doc = "SPI MOSI data (MSB-first serialization)."]
pub mod mosi { # [doc = "Register `MOSI` reader"]
pub struct R (crate :: R < MOSI_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < MOSI_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < MOSI_SPEC >> for R { fn from (reader : crate :: R < MOSI_SPEC >) -> Self { R (reader) } } # [doc = "Register `MOSI` writer"]
pub struct W (crate :: W < MOSI_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < MOSI_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < MOSI_SPEC >> for W { fn from (writer : crate :: W < MOSI_SPEC >) -> Self { W (writer) } } # [doc = "Field `mosi` reader - "]
pub struct MOSI_R (crate :: FieldReader < u8 , u8 >) ; impl MOSI_R { pub (crate) fn new (bits : u8) -> Self { MOSI_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for MOSI_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `mosi` writer - "]
pub struct MOSI_W < 'a > { w : & 'a mut W , } impl < 'a > MOSI_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn mosi (& self) -> MOSI_R { MOSI_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn mosi (& mut self) -> MOSI_W { MOSI_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "SPI MOSI data (MSB-first serialization).\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mosi](index.html) module"]
pub struct MOSI_SPEC ; impl crate :: RegisterSpec for MOSI_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [mosi::R](R) reader structure"]
impl crate :: Readable for MOSI_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [mosi::W](W) writer structure"]
impl crate :: Writable for MOSI_SPEC { type Writer = W ; } # [doc = "`reset()` method sets MOSI to value 0"]
impl crate :: Resettable for MOSI_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "MISO register accessor: an alias for `Reg<MISO_SPEC>`"]
pub type MISO = crate :: Reg < miso :: MISO_SPEC > ; # [doc = "SPI MISO data (MSB-first de-serialization)."]
pub mod miso { # [doc = "Register `MISO` reader"]
pub struct R (crate :: R < MISO_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < MISO_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < MISO_SPEC >> for R { fn from (reader : crate :: R < MISO_SPEC >) -> Self { R (reader) } } # [doc = "Field `miso` reader - "]
pub struct MISO_R (crate :: FieldReader < u8 , u8 >) ; impl MISO_R { pub (crate) fn new (bits : u8) -> Self { MISO_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for MISO_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn miso (& self) -> MISO_R { MISO_R :: new ((self . bits & 0xff) as u8) } } # [doc = "SPI MISO data (MSB-first de-serialization).\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [miso](index.html) module"]
pub struct MISO_SPEC ; impl crate :: RegisterSpec for MISO_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [miso::R](R) reader structure"]
impl crate :: Readable for MISO_SPEC { type Reader = R ; } # [doc = "`reset()` method sets MISO to value 0"]
impl crate :: Resettable for MISO_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "CS register accessor: an alias for `Reg<CS_SPEC>`"]
pub type CS = crate :: Reg < cs :: CS_SPEC > ; # [doc = "SPI Chip Select."]
pub mod cs { # [doc = "Register `CS` reader"]
pub struct R (crate :: R < CS_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < CS_SPEC >> for R { fn from (reader : crate :: R < CS_SPEC >) -> Self { R (reader) } } # [doc = "Register `CS` writer"]
pub struct W (crate :: W < CS_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CS_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < CS_SPEC >> for W { fn from (writer : crate :: W < CS_SPEC >) -> Self { W (writer) } } # [doc = "Field `sel` reader - Write ``1`` to corresponding bit to enable Xfer for chip."]
pub struct SEL_R (crate :: FieldReader < bool , bool >) ; impl SEL_R { pub (crate) fn new (bits : bool) -> Self { SEL_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for SEL_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `sel` writer - Write ``1`` to corresponding bit to enable Xfer for chip."]
pub struct SEL_W < 'a > { w : & 'a mut W , } impl < 'a > SEL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Write ``1`` to corresponding bit to enable Xfer for chip."]
# [inline (always)]
pub fn sel (& self) -> SEL_R { SEL_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write ``1`` to corresponding bit to enable Xfer for chip."]
# [inline (always)]
pub fn sel (& mut self) -> SEL_W { SEL_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "SPI Chip Select.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](index.html) module"]
pub struct CS_SPEC ; impl crate :: RegisterSpec for CS_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [cs::R](R) reader structure"]
impl crate :: Readable for CS_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [cs::W](W) writer structure"]
impl crate :: Writable for CS_SPEC { type Writer = W ; } # [doc = "`reset()` method sets CS to value 0x01"]
impl crate :: Resettable for CS_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0x01 } } } # [doc = "LOOPBACK register accessor: an alias for `Reg<LOOPBACK_SPEC>`"]
pub type LOOPBACK = crate :: Reg < loopback :: LOOPBACK_SPEC > ; # [doc = "SPI loopback mode. Write ``1`` to enable MOSI to MISO internal loopback."]
pub mod loopback { # [doc = "Register `LOOPBACK` reader"]
pub struct R (crate :: R < LOOPBACK_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < LOOPBACK_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < LOOPBACK_SPEC >> for R { fn from (reader : crate :: R < LOOPBACK_SPEC >) -> Self { R (reader) } } # [doc = "Register `LOOPBACK` writer"]
pub struct W (crate :: W < LOOPBACK_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < LOOPBACK_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < LOOPBACK_SPEC >> for W { fn from (writer : crate :: W < LOOPBACK_SPEC >) -> Self { W (writer) } } # [doc = "Field `loopback` reader - "]
pub struct LOOPBACK_R (crate :: FieldReader < bool , bool >) ; impl LOOPBACK_R { pub (crate) fn new (bits : bool) -> Self { LOOPBACK_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for LOOPBACK_R { type Target = crate :: FieldReader < bool , bool > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `loopback` writer - "]
pub struct LOOPBACK_W < 'a > { w : & 'a mut W , } impl < 'a > LOOPBACK_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn loopback (& self) -> LOOPBACK_R { LOOPBACK_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn loopback (& mut self) -> LOOPBACK_W { LOOPBACK_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "SPI loopback mode. Write ``1`` to enable MOSI to MISO internal loopback.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [loopback](index.html) module"]
pub struct LOOPBACK_SPEC ; impl crate :: RegisterSpec for LOOPBACK_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [loopback::R](R) reader structure"]
impl crate :: Readable for LOOPBACK_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [loopback::W](W) writer structure"]
impl crate :: Writable for LOOPBACK_SPEC { type Writer = W ; } # [doc = "`reset()` method sets LOOPBACK to value 0"]
impl crate :: Resettable for LOOPBACK_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } # [doc = "CLK_DIVIDER register accessor: an alias for `Reg<CLK_DIVIDER_SPEC>`"]
pub type CLK_DIVIDER = crate :: Reg < clk_divider :: CLK_DIVIDER_SPEC > ; # [doc = "SPI Clk Divider."]
pub mod clk_divider { # [doc = "Register `CLK_DIVIDER` reader"]
pub struct R (crate :: R < CLK_DIVIDER_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CLK_DIVIDER_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < CLK_DIVIDER_SPEC >> for R { fn from (reader : crate :: R < CLK_DIVIDER_SPEC >) -> Self { R (reader) } } # [doc = "Register `CLK_DIVIDER` writer"]
pub struct W (crate :: W < CLK_DIVIDER_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CLK_DIVIDER_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < CLK_DIVIDER_SPEC >> for W { fn from (writer : crate :: W < CLK_DIVIDER_SPEC >) -> Self { W (writer) } } # [doc = "Field `clk_divider` reader - "]
pub struct CLK_DIVIDER_R (crate :: FieldReader < u16 , u16 >) ; impl CLK_DIVIDER_R { pub (crate) fn new (bits : u16) -> Self { CLK_DIVIDER_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for CLK_DIVIDER_R { type Target = crate :: FieldReader < u16 , u16 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `clk_divider` writer - "]
pub struct CLK_DIVIDER_W < 'a > { w : & 'a mut W , } impl < 'a > CLK_DIVIDER_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff) | ((value as u32) & 0xffff) ; self . w } } impl R { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn clk_divider (& self) -> CLK_DIVIDER_R { CLK_DIVIDER_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn clk_divider (& mut self) -> CLK_DIVIDER_W { CLK_DIVIDER_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "SPI Clk Divider.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk_divider](index.html) module"]
pub struct CLK_DIVIDER_SPEC ; impl crate :: RegisterSpec for CLK_DIVIDER_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [clk_divider::R](R) reader structure"]
impl crate :: Readable for CLK_DIVIDER_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [clk_divider::W](W) writer structure"]
impl crate :: Writable for CLK_DIVIDER_SPEC { type Writer = W ; } # [doc = "`reset()` method sets CLK_DIVIDER to value 0x07"]
impl crate :: Resettable for CLK_DIVIDER_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0x07 } } } } # [doc = "OLED_CTL"]
pub struct OLED_CTL { _marker : PhantomData < * const () > } unsafe impl Send for OLED_CTL { } impl OLED_CTL { # [doc = r"Pointer to the register block"]
pub const PTR : * const oled_ctl :: RegisterBlock = 0x8200_4800 as * const _ ; # [doc = r"Return the pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const oled_ctl :: RegisterBlock { Self :: PTR } } impl Deref for OLED_CTL { type Target = oled_ctl :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * Self :: PTR } } } # [doc = "OLED_CTL"]
pub mod oled_ctl { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - GPIO Output(s) Control."]
pub out : crate :: Reg < out :: OUT_SPEC > , } # [doc = "OUT register accessor: an alias for `Reg<OUT_SPEC>`"]
pub type OUT = crate :: Reg < out :: OUT_SPEC > ; # [doc = "GPIO Output(s) Control."]
pub mod out { # [doc = "Register `OUT` reader"]
pub struct R (crate :: R < OUT_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < OUT_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: convert :: From < crate :: R < OUT_SPEC >> for R { fn from (reader : crate :: R < OUT_SPEC >) -> Self { R (reader) } } # [doc = "Register `OUT` writer"]
pub struct W (crate :: W < OUT_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < OUT_SPEC > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)]
fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl core :: convert :: From < crate :: W < OUT_SPEC >> for W { fn from (writer : crate :: W < OUT_SPEC >) -> Self { W (writer) } } # [doc = "Field `out` reader - "]
pub struct OUT_R (crate :: FieldReader < u8 , u8 >) ; impl OUT_R { pub (crate) fn new (bits : u8) -> Self { OUT_R (crate :: FieldReader :: new (bits)) } } impl core :: ops :: Deref for OUT_R { type Target = crate :: FieldReader < u8 , u8 > ; # [inline (always)]
fn deref (& self) -> & Self :: Target { & self . 0 } } # [doc = "Field `out` writer - "]
pub struct OUT_W < 'a > { w : & 'a mut W , } impl < 'a > OUT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x07) | ((value as u32) & 0x07) ; self . w } } impl R { # [doc = "Bits 0:2"]
# [inline (always)]
pub fn out (& self) -> OUT_R { OUT_R :: new ((self . bits & 0x07) as u8) } } impl W { # [doc = "Bits 0:2"]
# [inline (always)]
pub fn out (& mut self) -> OUT_W { OUT_W { w : self } } # [doc = "Writes raw bits to the register."]
pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "GPIO Output(s) Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out](index.html) module"]
pub struct OUT_SPEC ; impl crate :: RegisterSpec for OUT_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [out::R](R) reader structure"]
impl crate :: Readable for OUT_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [out::W](W) writer structure"]
impl crate :: Writable for OUT_SPEC { type Writer = W ; } # [doc = "`reset()` method sets OUT to value 0"]
impl crate :: Resettable for OUT_SPEC { # [inline (always)]
fn reset_value () -> Self :: Ux { 0 } } } } # [no_mangle]
static mut DEVICE_PERIPHERALS : bool = false ; # [doc = r"All the peripherals"]
# [allow (non_snake_case)]
pub struct Peripherals { # [doc = "CTRL"]
pub CTRL : CTRL , # [doc = "IDENTIFIER_MEM"]
pub IDENTIFIER_MEM : IDENTIFIER_MEM , # [doc = "UART_PHY"]
pub UART_PHY : UART_PHY , # [doc = "UART"]
pub UART : UART , # [doc = "TIMER0"]
pub TIMER0 : TIMER0 , # [doc = "SDRAM"]
pub SDRAM : SDRAM , # [doc = "LEDS"]
pub LEDS : LEDS , # [doc = "OLED_SPI"]
pub OLED_SPI : OLED_SPI , # [doc = "OLED_CTL"]
pub OLED_CTL : OLED_CTL , } impl Peripherals { # [doc = r"Returns all the peripherals *once*"]
# [inline]
pub fn take () -> Option < Self > { riscv :: interrupt :: free (| _ | { if unsafe { DEVICE_PERIPHERALS } { None } else { Some (unsafe { Peripherals :: steal () }) } }) } # [doc = r"Unchecked version of `Peripherals::take`"]
# [inline]
pub unsafe fn steal () -> Self { DEVICE_PERIPHERALS = true ; Peripherals { CTRL : CTRL { _marker : PhantomData } , IDENTIFIER_MEM : IDENTIFIER_MEM { _marker : PhantomData } , UART_PHY : UART_PHY { _marker : PhantomData } , UART : UART { _marker : PhantomData } , TIMER0 : TIMER0 { _marker : PhantomData } , SDRAM : SDRAM { _marker : PhantomData } , LEDS : LEDS { _marker : PhantomData } , OLED_SPI : OLED_SPI { _marker : PhantomData } , OLED_CTL : OLED_CTL { _marker : PhantomData } , } } }