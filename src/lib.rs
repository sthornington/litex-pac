# ! [doc = "Peripheral access API for SOC microcontrollers (generated using svd2rust v0.17.0)\n\nYou can find an overview of the API [here].\n\n[here]: https://docs.rs/svd2rust/0.17.0/svd2rust/#peripheral-api"]
# ! [deny (const_err)]
# ! [deny (dead_code)]
# ! [deny (improper_ctypes)]
# ! [deny (legacy_directory_ownership)]
# ! [deny (missing_docs)]
# ! [deny (no_mangle_generic_items)]
# ! [deny (non_shorthand_field_patterns)]
# ! [deny (overflowing_literals)]
# ! [deny (path_statements)]
# ! [deny (patterns_in_fns_without_body)]
# ! [deny (plugin_as_library)]
# ! [deny (private_in_public)]
# ! [deny (safe_extern_statics)]
# ! [deny (unconditional_recursion)]
# ! [deny (unions_with_drop_fields)]
# ! [deny (unused_allocation)]
# ! [deny (unused_comparisons)]
# ! [deny (unused_parens)]
# ! [deny (while_true)]
# ! [allow (non_camel_case_types)]
# ! [allow (non_snake_case)]
# ! [no_std]
extern crate riscv ; # [cfg (feature = "rt")]
extern crate riscv_rt ; extern crate bare_metal ; extern crate vcell ; use core :: ops :: Deref ; use core :: marker :: PhantomData ; # [doc (hidden)]
pub mod interrupt { # [doc = r"Enumeration of all the interrupts"]
# [derive (Copy , Clone , Debug)]
# [repr (u8)]
pub enum Interrupt { # [doc = "0 - uart"]
UART = 0 , # [doc = "1 - timer0"]
TIMER0 = 1 , } unsafe impl bare_metal :: Nr for Interrupt { # [inline (always)]
fn nr (& self) -> u8 { * self as u8 } } # [derive (Debug , Copy , Clone)]
pub struct TryFromInterruptError (()) ; impl Interrupt { # [inline]
pub fn try_from (value : u8) -> Result < Self , TryFromInterruptError > { match value { 0 => Ok (Interrupt :: UART) , 1 => Ok (Interrupt :: TIMER0) , _ => Err (TryFromInterruptError (())) , } } } # [cfg (feature = "rt")]
# [macro_export]
# [doc = r" Assigns a handler to an interrupt"]
# [doc = r""]
# [doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
# [doc = r" function that will be used as the handler of that interrupt. That function"]
# [doc = r" must have signature `fn()`."]
# [doc = r""]
# [doc = r" Optionally, a third argument may be used to declare interrupt local data."]
# [doc = r" The handler will have exclusive access to these *local* variables on each"]
# [doc = r" invocation. If the third argument is used then the signature of the handler"]
# [doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
# [doc = r" passed to the macro."]
# [doc = r""]
# [doc = r" # Example"]
# [doc = r""]
# [doc = r" ``` ignore"]
# [doc = r" interrupt!(TIM2, periodic);"]
# [doc = r""]
# [doc = r" fn periodic() {"]
# [doc = r#"     print!(".");"#]
# [doc = r" }"]
# [doc = r""]
# [doc = r" interrupt!(TIM3, tick, locals: {"]
# [doc = r"     tick: bool = false;"]
# [doc = r" });"]
# [doc = r""]
# [doc = r" fn tick(locals: &mut TIM3::Locals) {"]
# [doc = r"     locals.tick = !locals.tick;"]
# [doc = r""]
# [doc = r"     if locals.tick {"]
# [doc = r#"         println!("Tick");"#]
# [doc = r"     } else {"]
# [doc = r#"         println!("Tock");"#]
# [doc = r"     }"]
# [doc = r" }"]
# [doc = r" ```"]
macro_rules ! interrupt { ($ NAME : ident , $ path : path , locals : { $ ($ lvar : ident : $ lty : ty = $ lval : expr ;) * }) => { # [allow (non_snake_case)]
mod $ NAME { pub struct Locals { $ (pub $ lvar : $ lty ,) * } } # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ($ lvar : $ lval ,) * } ; let f : fn (& mut self :: $ NAME :: Locals) = $ path ; f (unsafe { & mut LOCALS }) ; } } ; ($ NAME : ident , $ path : path) => { # [allow (non_snake_case)]
# [no_mangle]
pub extern "C" fn $ NAME () { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn () = $ path ; f () ; } } } } pub use self :: interrupt :: Interrupt ; # [allow (unused_imports)]
use generic :: * ; # [doc = r"Common register and bit access and modify traits"]
pub mod generic { use core :: marker ; # [doc = "This trait shows that register has `read` method"]
# [doc = ""]
# [doc = "Registers marked with `Writable` can be also `modify`'ed"]
pub trait Readable { } # [doc = "This trait shows that register has `write`, `write_with_zero` and `reset` method"]
# [doc = ""]
# [doc = "Registers marked with `Readable` can be also `modify`'ed"]
pub trait Writable { } # [doc = "Reset value of the register"]
# [doc = ""]
# [doc = "This value is initial value for `write` method."]
# [doc = "It can be also directly writed to register by `reset` method."]
pub trait ResetValue { # [doc = "Register size"]
type Type ; # [doc = "Reset value of the register"]
fn reset_value () -> Self :: Type ; } # [doc = "This structure provides volatile access to register"]
pub struct Reg < U , REG > { register : vcell :: VolatileCell < U > , _marker : marker :: PhantomData < REG > , } unsafe impl < U : Send , REG > Send for Reg < U , REG > { } impl < U , REG > Reg < U , REG > where Self : Readable , U : Copy { # [doc = "Reads the contents of `Readable` register"]
# [doc = ""]
# [doc = "You can read the contents of a register in such way:"]
# [doc = "```ignore"]
# [doc = "let bits = periph.reg.read().bits();"]
# [doc = "```"]
# [doc = "or get the content of a particular field of a register."]
# [doc = "```ignore"]
# [doc = "let reader = periph.reg.read();"]
# [doc = "let bits = reader.field1().bits();"]
# [doc = "let flag = reader.field2().bit_is_set();"]
# [doc = "```"]
# [inline (always)]
pub fn read (& self) -> R < U , Self > { R { bits : self . register . get () , _reg : marker :: PhantomData } } } impl < U , REG > Reg < U , REG > where Self : ResetValue < Type = U > + Writable , U : Copy , { # [doc = "Writes the reset value to `Writable` register"]
# [doc = ""]
# [doc = "Resets the register to its initial state"]
# [inline (always)]
pub fn reset (& self) { self . register . set (Self :: reset_value ()) } } impl < U , REG > Reg < U , REG > where Self : ResetValue < Type = U > + Writable , U : Copy { # [doc = "Writes bits to `Writable` register"]
# [doc = ""]
# [doc = "You can write raw bits into a register:"]
# [doc = "```ignore"]
# [doc = "periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
# [doc = "```"]
# [doc = "or write only the fields you need:"]
# [doc = "```ignore"]
# [doc = "periph.reg.write(|w| w"]
# [doc = "    .field1().bits(newfield1bits)"]
# [doc = "    .field2().set_bit()"]
# [doc = "    .field3().variant(VARIANT)"]
# [doc = ");"]
# [doc = "```"]
# [doc = "Other fields will have reset value."]
# [inline (always)]
pub fn write < F > (& self , f : F) where F : FnOnce (& mut W < U , Self >) -> & mut W < U , Self > { self . register . set (f (& mut W { bits : Self :: reset_value () , _reg : marker :: PhantomData }) . bits) ; } } impl < U , REG > Reg < U , REG > where Self : Writable , U : Copy + Default { # [doc = "Writes Zero to `Writable` register"]
# [doc = ""]
# [doc = "Similar to `write`, but unused bits will contain 0."]
# [inline (always)]
pub fn write_with_zero < F > (& self , f : F) where F : FnOnce (& mut W < U , Self >) -> & mut W < U , Self > { self . register . set (f (& mut W { bits : U :: default () , _reg : marker :: PhantomData }) . bits) ; } } impl < U , REG > Reg < U , REG > where Self : Readable + Writable , U : Copy , { # [doc = "Modifies the contents of the register"]
# [doc = ""]
# [doc = "E.g. to do a read-modify-write sequence to change parts of a register:"]
# [doc = "```ignore"]
# [doc = "periph.reg.modify(|r, w| unsafe { w.bits("]
# [doc = "   r.bits() | 3"]
# [doc = ") });"]
# [doc = "```"]
# [doc = "or"]
# [doc = "```ignore"]
# [doc = "periph.reg.modify(|_, w| w"]
# [doc = "    .field1().bits(newfield1bits)"]
# [doc = "    .field2().set_bit()"]
# [doc = "    .field3().variant(VARIANT)"]
# [doc = ");"]
# [doc = "```"]
# [doc = "Other fields will have value they had before call `modify`."]
# [inline (always)]
pub fn modify < F > (& self , f : F) where for < 'w > F : FnOnce (& R < U , Self > , & 'w mut W < U , Self >) -> & 'w mut W < U , Self > { let bits = self . register . get () ; self . register . set (f (& R { bits , _reg : marker :: PhantomData } , & mut W { bits , _reg : marker :: PhantomData }) . bits) ; } } # [doc = "Register/field reader"]
# [doc = ""]
# [doc = "Result of the [`read`](Reg::read) method of a register."]
# [doc = "Also it can be used in the [`modify`](Reg::read) method"]
pub struct R < U , T > { pub (crate) bits : U , _reg : marker :: PhantomData < T > , } impl < U , T > R < U , T > where U : Copy { # [doc = "Create new instance of reader"]
# [inline (always)]
pub (crate) fn new (bits : U) -> Self { Self { bits , _reg : marker :: PhantomData , } } # [doc = "Read raw bits from register/field"]
# [inline (always)]
pub fn bits (& self) -> U { self . bits } } impl < U , T , FI > PartialEq < FI > for R < U , T > where U : PartialEq , FI : Copy + Into < U > { # [inline (always)]
fn eq (& self , other : & FI) -> bool { self . bits . eq (& (* other) . into ()) } } impl < FI > R < bool , FI > { # [doc = "Value of the field as raw bits"]
# [inline (always)]
pub fn bit (& self) -> bool { self . bits } # [doc = "Returns `true` if the bit is clear (0)"]
# [inline (always)]
pub fn bit_is_clear (& self) -> bool { ! self . bit () } # [doc = "Returns `true` if the bit is set (1)"]
# [inline (always)]
pub fn bit_is_set (& self) -> bool { self . bit () } } # [doc = "Register writer"]
# [doc = ""]
# [doc = "Used as an argument to the closures in the [`write`](Reg::write) and [`modify`](Reg::modify) methods of the register"]
pub struct W < U , REG > { # [doc = "Writable bits"]
pub (crate) bits : U , _reg : marker :: PhantomData < REG > , } impl < U , REG > W < U , REG > { # [doc = "Writes raw bits to the register"]
# [inline (always)]
pub unsafe fn bits (& mut self , bits : U) -> & mut Self { self . bits = bits ; self } } # [doc = "Used if enumerated values cover not the whole range"]
# [derive (Clone , Copy , PartialEq)]
pub enum Variant < U , T > { # [doc = "Expected variant"]
Val (T) , # [doc = "Raw bits"]
Res (U) , } } # [doc = "CTRL"]
pub struct CTRL { _marker : PhantomData < * const () > } unsafe impl Send for CTRL { } impl CTRL { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const ctrl :: RegisterBlock { 0xf000_0000 as * const _ } } impl Deref for CTRL { type Target = ctrl :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * CTRL :: ptr () } } } # [doc = "CTRL"]
pub mod ctrl { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Any write to this register will reset the SoC."]
pub reset : RESET , # [doc = "0x04 - Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub scratch : SCRATCH , # [doc = "0x08 - Total number of Wishbone bus errors (timeouts) since start."]
pub bus_errors : BUS_ERRORS , } # [doc = "Any write to this register will reset the SoC.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reset](reset) module"]
pub type RESET = crate :: Reg < u32 , _RESET > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RESET ; # [doc = "`read()` method returns [reset::R](reset::R) reader structure"]
impl crate :: Readable for RESET { } # [doc = "`write(|w| ..)` method takes [reset::W](reset::W) writer structure"]
impl crate :: Writable for RESET { } # [doc = "Any write to this register will reset the SoC."]
pub mod reset { # [doc = "Reader of register RESET"]
pub type R = crate :: R < u32 , super :: RESET > ; # [doc = "Writer for register RESET"]
pub type W = crate :: W < u32 , super :: RESET > ; # [doc = "Register RESET `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RESET { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `reset`"]
pub type RESET_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `reset`"]
pub struct RESET_W < 'a > { w : & 'a mut W , } impl < 'a > RESET_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn reset (& self) -> RESET_R { RESET_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn reset (& mut self) -> RESET_W { RESET_W { w : self } } } } # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [scratch](scratch) module"]
pub type SCRATCH = crate :: Reg < u32 , _SCRATCH > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SCRATCH ; # [doc = "`read()` method returns [scratch::R](scratch::R) reader structure"]
impl crate :: Readable for SCRATCH { } # [doc = "`write(|w| ..)` method takes [scratch::W](scratch::W) writer structure"]
impl crate :: Writable for SCRATCH { } # [doc = "Use this register as a scratch space to verify that software read/write accesses to the Wishbone/CSR bus are working correctly. The initial reset value of 0x1234578 can be used to verify endianness."]
pub mod scratch { # [doc = "Reader of register SCRATCH"]
pub type R = crate :: R < u32 , super :: SCRATCH > ; # [doc = "Writer for register SCRATCH"]
pub type W = crate :: W < u32 , super :: SCRATCH > ; # [doc = "Register SCRATCH `reset()`'s with value 0x1234_5678"]
impl crate :: ResetValue for super :: SCRATCH { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x1234_5678 } } # [doc = "Reader of field `scratch`"]
pub type SCRATCH_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `scratch`"]
pub struct SCRATCH_W < 'a > { w : & 'a mut W , } impl < 'a > SCRATCH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& self) -> SCRATCH_R { SCRATCH_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn scratch (& mut self) -> SCRATCH_W { SCRATCH_W { w : self } } } } # [doc = "Total number of Wishbone bus errors (timeouts) since start.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bus_errors](bus_errors) module"]
pub type BUS_ERRORS = crate :: Reg < u32 , _BUS_ERRORS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _BUS_ERRORS ; # [doc = "`read()` method returns [bus_errors::R](bus_errors::R) reader structure"]
impl crate :: Readable for BUS_ERRORS { } # [doc = "`write(|w| ..)` method takes [bus_errors::W](bus_errors::W) writer structure"]
impl crate :: Writable for BUS_ERRORS { } # [doc = "Total number of Wishbone bus errors (timeouts) since start."]
pub mod bus_errors { # [doc = "Reader of register BUS_ERRORS"]
pub type R = crate :: R < u32 , super :: BUS_ERRORS > ; # [doc = "Writer for register BUS_ERRORS"]
pub type W = crate :: W < u32 , super :: BUS_ERRORS > ; # [doc = "Register BUS_ERRORS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: BUS_ERRORS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `bus_errors`"]
pub type BUS_ERRORS_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `bus_errors`"]
pub struct BUS_ERRORS_W < 'a > { w : & 'a mut W , } impl < 'a > BUS_ERRORS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn bus_errors (& self) -> BUS_ERRORS_R { BUS_ERRORS_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn bus_errors (& mut self) -> BUS_ERRORS_W { BUS_ERRORS_W { w : self } } } } } # [doc = "IDENTIFIER_MEM"]
pub struct IDENTIFIER_MEM { _marker : PhantomData < * const () > } unsafe impl Send for IDENTIFIER_MEM { } impl IDENTIFIER_MEM { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const identifier_mem :: RegisterBlock { 0xf000_0800 as * const _ } } impl Deref for IDENTIFIER_MEM { type Target = identifier_mem :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * IDENTIFIER_MEM :: ptr () } } } # [doc = "IDENTIFIER_MEM"]
pub mod identifier_mem { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - 8 x 39-bit memory"]
pub identifier_mem : IDENTIFIER_MEM , } # [doc = "8 x 39-bit memory\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [identifier_mem](identifier_mem) module"]
pub type IDENTIFIER_MEM = crate :: Reg < u32 , _IDENTIFIER_MEM > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _IDENTIFIER_MEM ; # [doc = "`read()` method returns [identifier_mem::R](identifier_mem::R) reader structure"]
impl crate :: Readable for IDENTIFIER_MEM { } # [doc = "`write(|w| ..)` method takes [identifier_mem::W](identifier_mem::W) writer structure"]
impl crate :: Writable for IDENTIFIER_MEM { } # [doc = "8 x 39-bit memory"]
pub mod identifier_mem { # [doc = "Reader of register IDENTIFIER_MEM"]
pub type R = crate :: R < u32 , super :: IDENTIFIER_MEM > ; # [doc = "Writer for register IDENTIFIER_MEM"]
pub type W = crate :: W < u32 , super :: IDENTIFIER_MEM > ; # [doc = "Register IDENTIFIER_MEM `reset()`'s with value 0"]
impl crate :: ResetValue for super :: IDENTIFIER_MEM { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `identifier_mem`"]
pub type IDENTIFIER_MEM_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `identifier_mem`"]
pub struct IDENTIFIER_MEM_W < 'a > { w : & 'a mut W , } impl < 'a > IDENTIFIER_MEM_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& self) -> IDENTIFIER_MEM_R { IDENTIFIER_MEM_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn identifier_mem (& mut self) -> IDENTIFIER_MEM_W { IDENTIFIER_MEM_W { w : self } } } } } # [doc = "LEDS"]
pub struct LEDS { _marker : PhantomData < * const () > } unsafe impl Send for LEDS { } impl LEDS { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const leds :: RegisterBlock { 0xf000_1000 as * const _ } } impl Deref for LEDS { type Target = leds :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * LEDS :: ptr () } } } # [doc = "LEDS"]
pub mod leds { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Led Output(s) Control."]
pub out : OUT , } # [doc = "Led Output(s) Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out](out) module"]
pub type OUT = crate :: Reg < u32 , _OUT > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _OUT ; # [doc = "`read()` method returns [out::R](out::R) reader structure"]
impl crate :: Readable for OUT { } # [doc = "`write(|w| ..)` method takes [out::W](out::W) writer structure"]
impl crate :: Writable for OUT { } # [doc = "Led Output(s) Control."]
pub mod out { # [doc = "Reader of register OUT"]
pub type R = crate :: R < u32 , super :: OUT > ; # [doc = "Writer for register OUT"]
pub type W = crate :: W < u32 , super :: OUT > ; # [doc = "Register OUT `reset()`'s with value 0"]
impl crate :: ResetValue for super :: OUT { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `out`"]
pub type OUT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `out`"]
pub struct OUT_W < 'a > { w : & 'a mut W , } impl < 'a > OUT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn out (& self) -> OUT_R { OUT_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn out (& mut self) -> OUT_W { OUT_W { w : self } } } } } # [doc = "MATRIX"]
pub struct MATRIX { _marker : PhantomData < * const () > } unsafe impl Send for MATRIX { } impl MATRIX { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const matrix :: RegisterBlock { 0xf000_1800 as * const _ } } impl Deref for MATRIX { type Target = matrix :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * MATRIX :: ptr () } } } # [doc = "MATRIX"]
pub mod matrix { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub speed : SPEED , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [speed](speed) module"]
pub type SPEED = crate :: Reg < u32 , _SPEED > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _SPEED ; # [doc = "`read()` method returns [speed::R](speed::R) reader structure"]
impl crate :: Readable for SPEED { } # [doc = "`write(|w| ..)` method takes [speed::W](speed::W) writer structure"]
impl crate :: Writable for SPEED { } # [doc = ""]
pub mod speed { # [doc = "Reader of register SPEED"]
pub type R = crate :: R < u32 , super :: SPEED > ; # [doc = "Writer for register SPEED"]
pub type W = crate :: W < u32 , super :: SPEED > ; # [doc = "Register SPEED `reset()`'s with value 0"]
impl crate :: ResetValue for super :: SPEED { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `speed`"]
pub type SPEED_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `speed`"]
pub struct SPEED_W < 'a > { w : & 'a mut W , } impl < 'a > SPEED_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn speed (& self) -> SPEED_R { SPEED_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn speed (& mut self) -> SPEED_W { SPEED_W { w : self } } } } } # [doc = "OLED_CTL"]
pub struct OLED_CTL { _marker : PhantomData < * const () > } unsafe impl Send for OLED_CTL { } impl OLED_CTL { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const oled_ctl :: RegisterBlock { 0xf000_2000 as * const _ } } impl Deref for OLED_CTL { type Target = oled_ctl :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * OLED_CTL :: ptr () } } } # [doc = "OLED_CTL"]
pub mod oled_ctl { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - GPIO Output(s) Control."]
pub out : OUT , } # [doc = "GPIO Output(s) Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [out](out) module"]
pub type OUT = crate :: Reg < u32 , _OUT > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _OUT ; # [doc = "`read()` method returns [out::R](out::R) reader structure"]
impl crate :: Readable for OUT { } # [doc = "`write(|w| ..)` method takes [out::W](out::W) writer structure"]
impl crate :: Writable for OUT { } # [doc = "GPIO Output(s) Control."]
pub mod out { # [doc = "Reader of register OUT"]
pub type R = crate :: R < u32 , super :: OUT > ; # [doc = "Writer for register OUT"]
pub type W = crate :: W < u32 , super :: OUT > ; # [doc = "Register OUT `reset()`'s with value 0"]
impl crate :: ResetValue for super :: OUT { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `out`"]
pub type OUT_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `out`"]
pub struct OUT_W < 'a > { w : & 'a mut W , } impl < 'a > OUT_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x07) | ((value as u32) & 0x07) ; self . w } } impl R { # [doc = "Bits 0:2"]
# [inline (always)]
pub fn out (& self) -> OUT_R { OUT_R :: new ((self . bits & 0x07) as u8) } } impl W { # [doc = "Bits 0:2"]
# [inline (always)]
pub fn out (& mut self) -> OUT_W { OUT_W { w : self } } } } } # [doc = "OLED_SPI"]
pub struct OLED_SPI { _marker : PhantomData < * const () > } unsafe impl Send for OLED_SPI { } impl OLED_SPI { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const oled_spi :: RegisterBlock { 0xf000_2800 as * const _ } } impl Deref for OLED_SPI { type Target = oled_spi :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * OLED_SPI :: ptr () } } } # [doc = "OLED_SPI"]
pub mod oled_spi { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - SPI Control."]
pub control : CONTROL , # [doc = "0x04 - SPI Status."]
pub status : STATUS , # [doc = "0x08 - SPI MOSI data (MSB-first serialization)."]
pub mosi : MOSI , # [doc = "0x0c - SPI MISO data (MSB-first de-serialization)."]
pub miso : MISO , # [doc = "0x10 - SPI Chip Select."]
pub cs : CS , # [doc = "0x14 - SPI loopback mode. Write ``1`` to enable MOSI to MISO internal loopback."]
pub loopback : LOOPBACK , # [doc = "0x18 - SPI Clk Divider."]
pub clk_divider : CLK_DIVIDER , } # [doc = "SPI Control.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [control](control) module"]
pub type CONTROL = crate :: Reg < u32 , _CONTROL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CONTROL ; # [doc = "`read()` method returns [control::R](control::R) reader structure"]
impl crate :: Readable for CONTROL { } # [doc = "`write(|w| ..)` method takes [control::W](control::W) writer structure"]
impl crate :: Writable for CONTROL { } # [doc = "SPI Control."]
pub mod control { # [doc = "Reader of register CONTROL"]
pub type R = crate :: R < u32 , super :: CONTROL > ; # [doc = "Writer for register CONTROL"]
pub type W = crate :: W < u32 , super :: CONTROL > ; # [doc = "Register CONTROL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: CONTROL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `start`"]
pub type START_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `start`"]
pub struct START_W < 'a > { w : & 'a mut W , } impl < 'a > START_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `length`"]
pub type LENGTH_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `length`"]
pub struct LENGTH_W < 'a > { w : & 'a mut W , } impl < 'a > LENGTH_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0xff << 8)) | (((value as u32) & 0xff) << 8) ; self . w } } impl R { # [doc = "Bit 0 - Write ``1`` to start SPI Xfer"]
# [inline (always)]
pub fn start (& self) -> START_R { START_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bits 8:15 - SPI Xfer length (in bits)."]
# [inline (always)]
pub fn length (& self) -> LENGTH_R { LENGTH_R :: new (((self . bits >> 8) & 0xff) as u8) } } impl W { # [doc = "Bit 0 - Write ``1`` to start SPI Xfer"]
# [inline (always)]
pub fn start (& mut self) -> START_W { START_W { w : self } } # [doc = "Bits 8:15 - SPI Xfer length (in bits)."]
# [inline (always)]
pub fn length (& mut self) -> LENGTH_W { LENGTH_W { w : self } } } } # [doc = "SPI Status.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [status](status) module"]
pub type STATUS = crate :: Reg < u32 , _STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _STATUS ; # [doc = "`read()` method returns [status::R](status::R) reader structure"]
impl crate :: Readable for STATUS { } # [doc = "`write(|w| ..)` method takes [status::W](status::W) writer structure"]
impl crate :: Writable for STATUS { } # [doc = "SPI Status."]
pub mod status { # [doc = "Reader of register STATUS"]
pub type R = crate :: R < u32 , super :: STATUS > ; # [doc = "Writer for register STATUS"]
pub type W = crate :: W < u32 , super :: STATUS > ; # [doc = "Register STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `done`"]
pub type DONE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `done`"]
pub struct DONE_W < 'a > { w : & 'a mut W , } impl < 'a > DONE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - SPI Xfer done when read as ``1``."]
# [inline (always)]
pub fn done (& self) -> DONE_R { DONE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - SPI Xfer done when read as ``1``."]
# [inline (always)]
pub fn done (& mut self) -> DONE_W { DONE_W { w : self } } } } # [doc = "SPI MOSI data (MSB-first serialization).\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [mosi](mosi) module"]
pub type MOSI = crate :: Reg < u32 , _MOSI > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MOSI ; # [doc = "`read()` method returns [mosi::R](mosi::R) reader structure"]
impl crate :: Readable for MOSI { } # [doc = "`write(|w| ..)` method takes [mosi::W](mosi::W) writer structure"]
impl crate :: Writable for MOSI { } # [doc = "SPI MOSI data (MSB-first serialization)."]
pub mod mosi { # [doc = "Reader of register MOSI"]
pub type R = crate :: R < u32 , super :: MOSI > ; # [doc = "Writer for register MOSI"]
pub type W = crate :: W < u32 , super :: MOSI > ; # [doc = "Register MOSI `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MOSI { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `mosi`"]
pub type MOSI_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `mosi`"]
pub struct MOSI_W < 'a > { w : & 'a mut W , } impl < 'a > MOSI_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn mosi (& self) -> MOSI_R { MOSI_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn mosi (& mut self) -> MOSI_W { MOSI_W { w : self } } } } # [doc = "SPI MISO data (MSB-first de-serialization).\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [miso](miso) module"]
pub type MISO = crate :: Reg < u32 , _MISO > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _MISO ; # [doc = "`read()` method returns [miso::R](miso::R) reader structure"]
impl crate :: Readable for MISO { } # [doc = "`write(|w| ..)` method takes [miso::W](miso::W) writer structure"]
impl crate :: Writable for MISO { } # [doc = "SPI MISO data (MSB-first de-serialization)."]
pub mod miso { # [doc = "Reader of register MISO"]
pub type R = crate :: R < u32 , super :: MISO > ; # [doc = "Writer for register MISO"]
pub type W = crate :: W < u32 , super :: MISO > ; # [doc = "Register MISO `reset()`'s with value 0"]
impl crate :: ResetValue for super :: MISO { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `miso`"]
pub type MISO_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `miso`"]
pub struct MISO_W < 'a > { w : & 'a mut W , } impl < 'a > MISO_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn miso (& self) -> MISO_R { MISO_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn miso (& mut self) -> MISO_W { MISO_W { w : self } } } } # [doc = "SPI Chip Select.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cs](cs) module"]
pub type CS = crate :: Reg < u32 , _CS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CS ; # [doc = "`read()` method returns [cs::R](cs::R) reader structure"]
impl crate :: Readable for CS { } # [doc = "`write(|w| ..)` method takes [cs::W](cs::W) writer structure"]
impl crate :: Writable for CS { } # [doc = "SPI Chip Select."]
pub mod cs { # [doc = "Reader of register CS"]
pub type R = crate :: R < u32 , super :: CS > ; # [doc = "Writer for register CS"]
pub type W = crate :: W < u32 , super :: CS > ; # [doc = "Register CS `reset()`'s with value 0x01"]
impl crate :: ResetValue for super :: CS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x01 } } # [doc = "Reader of field `sel`"]
pub type SEL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sel`"]
pub struct SEL_W < 'a > { w : & 'a mut W , } impl < 'a > SEL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Write ``1`` to corresponding bit to enable Xfer for chip."]
# [inline (always)]
pub fn sel (& self) -> SEL_R { SEL_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write ``1`` to corresponding bit to enable Xfer for chip."]
# [inline (always)]
pub fn sel (& mut self) -> SEL_W { SEL_W { w : self } } } } # [doc = "SPI loopback mode. Write ``1`` to enable MOSI to MISO internal loopback.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [loopback](loopback) module"]
pub type LOOPBACK = crate :: Reg < u32 , _LOOPBACK > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _LOOPBACK ; # [doc = "`read()` method returns [loopback::R](loopback::R) reader structure"]
impl crate :: Readable for LOOPBACK { } # [doc = "`write(|w| ..)` method takes [loopback::W](loopback::W) writer structure"]
impl crate :: Writable for LOOPBACK { } # [doc = "SPI loopback mode. Write ``1`` to enable MOSI to MISO internal loopback."]
pub mod loopback { # [doc = "Reader of register LOOPBACK"]
pub type R = crate :: R < u32 , super :: LOOPBACK > ; # [doc = "Writer for register LOOPBACK"]
pub type W = crate :: W < u32 , super :: LOOPBACK > ; # [doc = "Register LOOPBACK `reset()`'s with value 0"]
impl crate :: ResetValue for super :: LOOPBACK { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `loopback`"]
pub type LOOPBACK_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `loopback`"]
pub struct LOOPBACK_W < 'a > { w : & 'a mut W , } impl < 'a > LOOPBACK_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn loopback (& self) -> LOOPBACK_R { LOOPBACK_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn loopback (& mut self) -> LOOPBACK_W { LOOPBACK_W { w : self } } } } # [doc = "SPI Clk Divider.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [clk_divider](clk_divider) module"]
pub type CLK_DIVIDER = crate :: Reg < u32 , _CLK_DIVIDER > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _CLK_DIVIDER ; # [doc = "`read()` method returns [clk_divider::R](clk_divider::R) reader structure"]
impl crate :: Readable for CLK_DIVIDER { } # [doc = "`write(|w| ..)` method takes [clk_divider::W](clk_divider::W) writer structure"]
impl crate :: Writable for CLK_DIVIDER { } # [doc = "SPI Clk Divider."]
pub mod clk_divider { # [doc = "Reader of register CLK_DIVIDER"]
pub type R = crate :: R < u32 , super :: CLK_DIVIDER > ; # [doc = "Writer for register CLK_DIVIDER"]
pub type W = crate :: W < u32 , super :: CLK_DIVIDER > ; # [doc = "Register CLK_DIVIDER `reset()`'s with value 0x07"]
impl crate :: ResetValue for super :: CLK_DIVIDER { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x07 } } # [doc = "Reader of field `clk_divider`"]
pub type CLK_DIVIDER_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `clk_divider`"]
pub struct CLK_DIVIDER_W < 'a > { w : & 'a mut W , } impl < 'a > CLK_DIVIDER_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff) | ((value as u32) & 0xffff) ; self . w } } impl R { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn clk_divider (& self) -> CLK_DIVIDER_R { CLK_DIVIDER_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn clk_divider (& mut self) -> CLK_DIVIDER_W { CLK_DIVIDER_W { w : self } } } } } # [doc = "SDRAM"]
pub struct SDRAM { _marker : PhantomData < * const () > } unsafe impl Send for SDRAM { } impl SDRAM { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const sdram :: RegisterBlock { 0xf000_3000 as * const _ } } impl Deref for SDRAM { type Target = sdram :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * SDRAM :: ptr () } } } # [doc = "SDRAM"]
pub mod sdram { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub dfii_control : DFII_CONTROL , # [doc = "0x04 - "]
pub dfii_pi0_command : DFII_PI0_COMMAND , # [doc = "0x08 - "]
pub dfii_pi0_command_issue : DFII_PI0_COMMAND_ISSUE , # [doc = "0x0c - "]
pub dfii_pi0_address : DFII_PI0_ADDRESS , # [doc = "0x10 - "]
pub dfii_pi0_baddress : DFII_PI0_BADDRESS , # [doc = "0x14 - "]
pub dfii_pi0_wrdata : DFII_PI0_WRDATA , # [doc = "0x18 - "]
pub dfii_pi0_rddata : DFII_PI0_RDDATA , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_control](dfii_control) module"]
pub type DFII_CONTROL = crate :: Reg < u32 , _DFII_CONTROL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_CONTROL ; # [doc = "`read()` method returns [dfii_control::R](dfii_control::R) reader structure"]
impl crate :: Readable for DFII_CONTROL { } # [doc = "`write(|w| ..)` method takes [dfii_control::W](dfii_control::W) writer structure"]
impl crate :: Writable for DFII_CONTROL { } # [doc = ""]
pub mod dfii_control { # [doc = "Reader of register DFII_CONTROL"]
pub type R = crate :: R < u32 , super :: DFII_CONTROL > ; # [doc = "Writer for register DFII_CONTROL"]
pub type W = crate :: W < u32 , super :: DFII_CONTROL > ; # [doc = "Register DFII_CONTROL `reset()`'s with value 0x01"]
impl crate :: ResetValue for super :: DFII_CONTROL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0x01 } } # [doc = "Reader of field `sel`"]
pub type SEL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `sel`"]
pub struct SEL_W < 'a > { w : & 'a mut W , } impl < 'a > SEL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `cke`"]
pub type CKE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `cke`"]
pub struct CKE_W < 'a > { w : & 'a mut W , } impl < 'a > CKE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } # [doc = "Reader of field `odt`"]
pub type ODT_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `odt`"]
pub struct ODT_W < 'a > { w : & 'a mut W , } impl < 'a > ODT_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 2)) | (((value as u32) & 0x01) << 2) ; self . w } } # [doc = "Reader of field `reset_n`"]
pub type RESET_N_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `reset_n`"]
pub struct RESET_N_W < 'a > { w : & 'a mut W , } impl < 'a > RESET_N_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 3)) | (((value as u32) & 0x01) << 3) ; self . w } } impl R { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn sel (& self) -> SEL_R { SEL_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn cke (& self) -> CKE_R { CKE_R :: new (((self . bits >> 1) & 0x01) != 0) } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn odt (& self) -> ODT_R { ODT_R :: new (((self . bits >> 2) & 0x01) != 0) } # [doc = "Bit 3 - None"]
# [inline (always)]
pub fn reset_n (& self) -> RESET_N_R { RESET_N_R :: new (((self . bits >> 3) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - None"]
# [inline (always)]
pub fn sel (& mut self) -> SEL_W { SEL_W { w : self } } # [doc = "Bit 1 - None"]
# [inline (always)]
pub fn cke (& mut self) -> CKE_W { CKE_W { w : self } } # [doc = "Bit 2 - None"]
# [inline (always)]
pub fn odt (& mut self) -> ODT_W { ODT_W { w : self } } # [doc = "Bit 3 - None"]
# [inline (always)]
pub fn reset_n (& mut self) -> RESET_N_W { RESET_N_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_command](dfii_pi0_command) module"]
pub type DFII_PI0_COMMAND = crate :: Reg < u32 , _DFII_PI0_COMMAND > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_COMMAND ; # [doc = "`read()` method returns [dfii_pi0_command::R](dfii_pi0_command::R) reader structure"]
impl crate :: Readable for DFII_PI0_COMMAND { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_command::W](dfii_pi0_command::W) writer structure"]
impl crate :: Writable for DFII_PI0_COMMAND { } # [doc = ""]
pub mod dfii_pi0_command { # [doc = "Reader of register DFII_PI0_COMMAND"]
pub type R = crate :: R < u32 , super :: DFII_PI0_COMMAND > ; # [doc = "Writer for register DFII_PI0_COMMAND"]
pub type W = crate :: W < u32 , super :: DFII_PI0_COMMAND > ; # [doc = "Register DFII_PI0_COMMAND `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_COMMAND { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_command`"]
pub type DFII_PI0_COMMAND_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `dfii_pi0_command`"]
pub struct DFII_PI0_COMMAND_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_COMMAND_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x3f) | ((value as u32) & 0x3f) ; self . w } } impl R { # [doc = "Bits 0:5"]
# [inline (always)]
pub fn dfii_pi0_command (& self) -> DFII_PI0_COMMAND_R { DFII_PI0_COMMAND_R :: new ((self . bits & 0x3f) as u8) } } impl W { # [doc = "Bits 0:5"]
# [inline (always)]
pub fn dfii_pi0_command (& mut self) -> DFII_PI0_COMMAND_W { DFII_PI0_COMMAND_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_command_issue](dfii_pi0_command_issue) module"]
pub type DFII_PI0_COMMAND_ISSUE = crate :: Reg < u32 , _DFII_PI0_COMMAND_ISSUE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_COMMAND_ISSUE ; # [doc = "`read()` method returns [dfii_pi0_command_issue::R](dfii_pi0_command_issue::R) reader structure"]
impl crate :: Readable for DFII_PI0_COMMAND_ISSUE { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_command_issue::W](dfii_pi0_command_issue::W) writer structure"]
impl crate :: Writable for DFII_PI0_COMMAND_ISSUE { } # [doc = ""]
pub mod dfii_pi0_command_issue { # [doc = "Reader of register DFII_PI0_COMMAND_ISSUE"]
pub type R = crate :: R < u32 , super :: DFII_PI0_COMMAND_ISSUE > ; # [doc = "Writer for register DFII_PI0_COMMAND_ISSUE"]
pub type W = crate :: W < u32 , super :: DFII_PI0_COMMAND_ISSUE > ; # [doc = "Register DFII_PI0_COMMAND_ISSUE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_COMMAND_ISSUE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_command_issue`"]
pub type DFII_PI0_COMMAND_ISSUE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `dfii_pi0_command_issue`"]
pub struct DFII_PI0_COMMAND_ISSUE_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_COMMAND_ISSUE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_command_issue (& self) -> DFII_PI0_COMMAND_ISSUE_R { DFII_PI0_COMMAND_ISSUE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn dfii_pi0_command_issue (& mut self) -> DFII_PI0_COMMAND_ISSUE_W { DFII_PI0_COMMAND_ISSUE_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_address](dfii_pi0_address) module"]
pub type DFII_PI0_ADDRESS = crate :: Reg < u32 , _DFII_PI0_ADDRESS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_ADDRESS ; # [doc = "`read()` method returns [dfii_pi0_address::R](dfii_pi0_address::R) reader structure"]
impl crate :: Readable for DFII_PI0_ADDRESS { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_address::W](dfii_pi0_address::W) writer structure"]
impl crate :: Writable for DFII_PI0_ADDRESS { } # [doc = ""]
pub mod dfii_pi0_address { # [doc = "Reader of register DFII_PI0_ADDRESS"]
pub type R = crate :: R < u32 , super :: DFII_PI0_ADDRESS > ; # [doc = "Writer for register DFII_PI0_ADDRESS"]
pub type W = crate :: W < u32 , super :: DFII_PI0_ADDRESS > ; # [doc = "Register DFII_PI0_ADDRESS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_ADDRESS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_address`"]
pub type DFII_PI0_ADDRESS_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `dfii_pi0_address`"]
pub struct DFII_PI0_ADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_ADDRESS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x1fff) | ((value as u32) & 0x1fff) ; self . w } } impl R { # [doc = "Bits 0:12"]
# [inline (always)]
pub fn dfii_pi0_address (& self) -> DFII_PI0_ADDRESS_R { DFII_PI0_ADDRESS_R :: new ((self . bits & 0x1fff) as u16) } } impl W { # [doc = "Bits 0:12"]
# [inline (always)]
pub fn dfii_pi0_address (& mut self) -> DFII_PI0_ADDRESS_W { DFII_PI0_ADDRESS_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_baddress](dfii_pi0_baddress) module"]
pub type DFII_PI0_BADDRESS = crate :: Reg < u32 , _DFII_PI0_BADDRESS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_BADDRESS ; # [doc = "`read()` method returns [dfii_pi0_baddress::R](dfii_pi0_baddress::R) reader structure"]
impl crate :: Readable for DFII_PI0_BADDRESS { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_baddress::W](dfii_pi0_baddress::W) writer structure"]
impl crate :: Writable for DFII_PI0_BADDRESS { } # [doc = ""]
pub mod dfii_pi0_baddress { # [doc = "Reader of register DFII_PI0_BADDRESS"]
pub type R = crate :: R < u32 , super :: DFII_PI0_BADDRESS > ; # [doc = "Writer for register DFII_PI0_BADDRESS"]
pub type W = crate :: W < u32 , super :: DFII_PI0_BADDRESS > ; # [doc = "Register DFII_PI0_BADDRESS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_BADDRESS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_baddress`"]
pub type DFII_PI0_BADDRESS_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `dfii_pi0_baddress`"]
pub struct DFII_PI0_BADDRESS_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_BADDRESS_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x03) | ((value as u32) & 0x03) ; self . w } } impl R { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn dfii_pi0_baddress (& self) -> DFII_PI0_BADDRESS_R { DFII_PI0_BADDRESS_R :: new ((self . bits & 0x03) as u8) } } impl W { # [doc = "Bits 0:1"]
# [inline (always)]
pub fn dfii_pi0_baddress (& mut self) -> DFII_PI0_BADDRESS_W { DFII_PI0_BADDRESS_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_wrdata](dfii_pi0_wrdata) module"]
pub type DFII_PI0_WRDATA = crate :: Reg < u32 , _DFII_PI0_WRDATA > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_WRDATA ; # [doc = "`read()` method returns [dfii_pi0_wrdata::R](dfii_pi0_wrdata::R) reader structure"]
impl crate :: Readable for DFII_PI0_WRDATA { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_wrdata::W](dfii_pi0_wrdata::W) writer structure"]
impl crate :: Writable for DFII_PI0_WRDATA { } # [doc = ""]
pub mod dfii_pi0_wrdata { # [doc = "Reader of register DFII_PI0_WRDATA"]
pub type R = crate :: R < u32 , super :: DFII_PI0_WRDATA > ; # [doc = "Writer for register DFII_PI0_WRDATA"]
pub type W = crate :: W < u32 , super :: DFII_PI0_WRDATA > ; # [doc = "Register DFII_PI0_WRDATA `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_WRDATA { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_wrdata`"]
pub type DFII_PI0_WRDATA_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `dfii_pi0_wrdata`"]
pub struct DFII_PI0_WRDATA_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_WRDATA_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff) | ((value as u32) & 0xffff) ; self . w } } impl R { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_wrdata (& self) -> DFII_PI0_WRDATA_R { DFII_PI0_WRDATA_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_wrdata (& mut self) -> DFII_PI0_WRDATA_W { DFII_PI0_WRDATA_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [dfii_pi0_rddata](dfii_pi0_rddata) module"]
pub type DFII_PI0_RDDATA = crate :: Reg < u32 , _DFII_PI0_RDDATA > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _DFII_PI0_RDDATA ; # [doc = "`read()` method returns [dfii_pi0_rddata::R](dfii_pi0_rddata::R) reader structure"]
impl crate :: Readable for DFII_PI0_RDDATA { } # [doc = "`write(|w| ..)` method takes [dfii_pi0_rddata::W](dfii_pi0_rddata::W) writer structure"]
impl crate :: Writable for DFII_PI0_RDDATA { } # [doc = ""]
pub mod dfii_pi0_rddata { # [doc = "Reader of register DFII_PI0_RDDATA"]
pub type R = crate :: R < u32 , super :: DFII_PI0_RDDATA > ; # [doc = "Writer for register DFII_PI0_RDDATA"]
pub type W = crate :: W < u32 , super :: DFII_PI0_RDDATA > ; # [doc = "Register DFII_PI0_RDDATA `reset()`'s with value 0"]
impl crate :: ResetValue for super :: DFII_PI0_RDDATA { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `dfii_pi0_rddata`"]
pub type DFII_PI0_RDDATA_R = crate :: R < u16 , u16 > ; # [doc = "Write proxy for field `dfii_pi0_rddata`"]
pub struct DFII_PI0_RDDATA_W < 'a > { w : & 'a mut W , } impl < 'a > DFII_PI0_RDDATA_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u16) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff) | ((value as u32) & 0xffff) ; self . w } } impl R { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_rddata (& self) -> DFII_PI0_RDDATA_R { DFII_PI0_RDDATA_R :: new ((self . bits & 0xffff) as u16) } } impl W { # [doc = "Bits 0:15"]
# [inline (always)]
pub fn dfii_pi0_rddata (& mut self) -> DFII_PI0_RDDATA_W { DFII_PI0_RDDATA_W { w : self } } } } } # [doc = "TIMER0"]
pub struct TIMER0 { _marker : PhantomData < * const () > } unsafe impl Send for TIMER0 { } impl TIMER0 { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const timer0 :: RegisterBlock { 0xf000_3800 as * const _ } } impl Deref for TIMER0 { type Target = timer0 :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * TIMER0 :: ptr () } } } # [doc = "TIMER0"]
pub mod timer0 { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub load : LOAD , # [doc = "0x04 - Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub reload : RELOAD , # [doc = "0x08 - Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub en : EN , # [doc = "0x0c - Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub update_value : UPDATE_VALUE , # [doc = "0x10 - Latched countdown value. This value is updated by writing to ``update_value``."]
pub value : VALUE , # [doc = "0x14 - This register contains the current raw level of the zero event trigger. Writes to this register have no effect."]
pub ev_status : EV_STATUS , # [doc = "0x18 - When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub ev_pending : EV_PENDING , # [doc = "0x1c - This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events."]
pub ev_enable : EV_ENABLE , } # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [load](load) module"]
pub type LOAD = crate :: Reg < u32 , _LOAD > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _LOAD ; # [doc = "`read()` method returns [load::R](load::R) reader structure"]
impl crate :: Readable for LOAD { } # [doc = "`write(|w| ..)` method takes [load::W](load::W) writer structure"]
impl crate :: Writable for LOAD { } # [doc = "Load value when Timer is (re-)enabled. In One-Shot mode, the value written to this register specifies the Timer's duration in clock cycles."]
pub mod load { # [doc = "Reader of register LOAD"]
pub type R = crate :: R < u32 , super :: LOAD > ; # [doc = "Writer for register LOAD"]
pub type W = crate :: W < u32 , super :: LOAD > ; # [doc = "Register LOAD `reset()`'s with value 0"]
impl crate :: ResetValue for super :: LOAD { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `load`"]
pub type LOAD_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `load`"]
pub struct LOAD_W < 'a > { w : & 'a mut W , } impl < 'a > LOAD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& self) -> LOAD_R { LOAD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn load (& mut self) -> LOAD_W { LOAD_W { w : self } } } } # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [reload](reload) module"]
pub type RELOAD = crate :: Reg < u32 , _RELOAD > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RELOAD ; # [doc = "`read()` method returns [reload::R](reload::R) reader structure"]
impl crate :: Readable for RELOAD { } # [doc = "`write(|w| ..)` method takes [reload::W](reload::W) writer structure"]
impl crate :: Writable for RELOAD { } # [doc = "Reload value when Timer reaches ``0``. In Periodic mode, the value written to this register specify the Timer's period in clock cycles."]
pub mod reload { # [doc = "Reader of register RELOAD"]
pub type R = crate :: R < u32 , super :: RELOAD > ; # [doc = "Writer for register RELOAD"]
pub type W = crate :: W < u32 , super :: RELOAD > ; # [doc = "Register RELOAD `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RELOAD { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `reload`"]
pub type RELOAD_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `reload`"]
pub struct RELOAD_W < 'a > { w : & 'a mut W , } impl < 'a > RELOAD_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& self) -> RELOAD_R { RELOAD_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn reload (& mut self) -> RELOAD_W { RELOAD_W { w : self } } } } # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [en](en) module"]
pub type EN = crate :: Reg < u32 , _EN > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EN ; # [doc = "`read()` method returns [en::R](en::R) reader structure"]
impl crate :: Readable for EN { } # [doc = "`write(|w| ..)` method takes [en::W](en::W) writer structure"]
impl crate :: Writable for EN { } # [doc = "Enable flag of the Timer. Set this flag to ``1`` to enable/start the Timer. Set to ``0`` to disable the Timer."]
pub mod en { # [doc = "Reader of register EN"]
pub type R = crate :: R < u32 , super :: EN > ; # [doc = "Writer for register EN"]
pub type W = crate :: W < u32 , super :: EN > ; # [doc = "Register EN `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EN { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `en`"]
pub type EN_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `en`"]
pub struct EN_W < 'a > { w : & 'a mut W , } impl < 'a > EN_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& self) -> EN_R { EN_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn en (& mut self) -> EN_W { EN_W { w : self } } } } # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [update_value](update_value) module"]
pub type UPDATE_VALUE = crate :: Reg < u32 , _UPDATE_VALUE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _UPDATE_VALUE ; # [doc = "`read()` method returns [update_value::R](update_value::R) reader structure"]
impl crate :: Readable for UPDATE_VALUE { } # [doc = "`write(|w| ..)` method takes [update_value::W](update_value::W) writer structure"]
impl crate :: Writable for UPDATE_VALUE { } # [doc = "Update trigger for the current countdown value. A write to this register latches the current countdown value to ``value`` register."]
pub mod update_value { # [doc = "Reader of register UPDATE_VALUE"]
pub type R = crate :: R < u32 , super :: UPDATE_VALUE > ; # [doc = "Writer for register UPDATE_VALUE"]
pub type W = crate :: W < u32 , super :: UPDATE_VALUE > ; # [doc = "Register UPDATE_VALUE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: UPDATE_VALUE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `update_value`"]
pub type UPDATE_VALUE_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `update_value`"]
pub struct UPDATE_VALUE_W < 'a > { w : & 'a mut W , } impl < 'a > UPDATE_VALUE_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& self) -> UPDATE_VALUE_R { UPDATE_VALUE_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn update_value (& mut self) -> UPDATE_VALUE_W { UPDATE_VALUE_W { w : self } } } } # [doc = "Latched countdown value. This value is updated by writing to ``update_value``.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [value](value) module"]
pub type VALUE = crate :: Reg < u32 , _VALUE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _VALUE ; # [doc = "`read()` method returns [value::R](value::R) reader structure"]
impl crate :: Readable for VALUE { } # [doc = "`write(|w| ..)` method takes [value::W](value::W) writer structure"]
impl crate :: Writable for VALUE { } # [doc = "Latched countdown value. This value is updated by writing to ``update_value``."]
pub mod value { # [doc = "Reader of register VALUE"]
pub type R = crate :: R < u32 , super :: VALUE > ; # [doc = "Writer for register VALUE"]
pub type W = crate :: W < u32 , super :: VALUE > ; # [doc = "Register VALUE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: VALUE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `value`"]
pub type VALUE_R = crate :: R < u32 , u32 > ; # [doc = "Write proxy for field `value`"]
pub struct VALUE_W < 'a > { w : & 'a mut W , } impl < 'a > VALUE_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u32) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xffff_ffff) | ((value as u32) & 0xffff_ffff) ; self . w } } impl R { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn value (& self) -> VALUE_R { VALUE_R :: new ((self . bits & 0xffff_ffff) as u32) } } impl W { # [doc = "Bits 0:31"]
# [inline (always)]
pub fn value (& mut self) -> VALUE_W { VALUE_W { w : self } } } } # [doc = "This register contains the current raw level of the zero event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](ev_status) module"]
pub type EV_STATUS = crate :: Reg < u32 , _EV_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_STATUS ; # [doc = "`read()` method returns [ev_status::R](ev_status::R) reader structure"]
impl crate :: Readable for EV_STATUS { } # [doc = "`write(|w| ..)` method takes [ev_status::W](ev_status::W) writer structure"]
impl crate :: Writable for EV_STATUS { } # [doc = "This register contains the current raw level of the zero event trigger. Writes to this register have no effect."]
pub mod ev_status { # [doc = "Reader of register EV_STATUS"]
pub type R = crate :: R < u32 , super :: EV_STATUS > ; # [doc = "Writer for register EV_STATUS"]
pub type W = crate :: W < u32 , super :: EV_STATUS > ; # [doc = "Register EV_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `zero`"]
pub type ZERO_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `zero`"]
pub struct ZERO_W < 'a > { w : & 'a mut W , } impl < 'a > ZERO_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Level of the ``zero`` event"]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``zero`` event"]
# [inline (always)]
pub fn zero (& mut self) -> ZERO_W { ZERO_W { w : self } } } } # [doc = "When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](ev_pending) module"]
pub type EV_PENDING = crate :: Reg < u32 , _EV_PENDING > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_PENDING ; # [doc = "`read()` method returns [ev_pending::R](ev_pending::R) reader structure"]
impl crate :: Readable for EV_PENDING { } # [doc = "`write(|w| ..)` method takes [ev_pending::W](ev_pending::W) writer structure"]
impl crate :: Writable for EV_PENDING { } # [doc = "When a zero event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod ev_pending { # [doc = "Reader of register EV_PENDING"]
pub type R = crate :: R < u32 , super :: EV_PENDING > ; # [doc = "Writer for register EV_PENDING"]
pub type W = crate :: W < u32 , super :: EV_PENDING > ; # [doc = "Register EV_PENDING `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_PENDING { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `zero`"]
pub type ZERO_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `zero`"]
pub struct ZERO_W < 'a > { w : & 'a mut W , } impl < 'a > ZERO_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `zero` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn zero (& mut self) -> ZERO_W { ZERO_W { w : self } } } } # [doc = "This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](ev_enable) module"]
pub type EV_ENABLE = crate :: Reg < u32 , _EV_ENABLE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_ENABLE ; # [doc = "`read()` method returns [ev_enable::R](ev_enable::R) reader structure"]
impl crate :: Readable for EV_ENABLE { } # [doc = "`write(|w| ..)` method takes [ev_enable::W](ev_enable::W) writer structure"]
impl crate :: Writable for EV_ENABLE { } # [doc = "This register enables the corresponding zero events. Write a ``0`` to this register to disable individual events."]
pub mod ev_enable { # [doc = "Reader of register EV_ENABLE"]
pub type R = crate :: R < u32 , super :: EV_ENABLE > ; # [doc = "Writer for register EV_ENABLE"]
pub type W = crate :: W < u32 , super :: EV_ENABLE > ; # [doc = "Register EV_ENABLE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_ENABLE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `zero`"]
pub type ZERO_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `zero`"]
pub struct ZERO_W < 'a > { w : & 'a mut W , } impl < 'a > ZERO_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``zero`` Event"]
# [inline (always)]
pub fn zero (& self) -> ZERO_R { ZERO_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``zero`` Event"]
# [inline (always)]
pub fn zero (& mut self) -> ZERO_W { ZERO_W { w : self } } } } } # [doc = "UART"]
pub struct UART { _marker : PhantomData < * const () > } unsafe impl Send for UART { } impl UART { # [doc = r"Returns a pointer to the register block"]
# [inline (always)]
pub const fn ptr () -> * const uart :: RegisterBlock { 0xf000_4000 as * const _ } } impl Deref for UART { type Target = uart :: RegisterBlock ; # [inline (always)]
fn deref (& self) -> & Self :: Target { unsafe { & * UART :: ptr () } } } # [doc = "UART"]
pub mod uart { # [doc = r"Register block"]
# [repr (C)]
pub struct RegisterBlock { # [doc = "0x00 - "]
pub rxtx : RXTX , # [doc = "0x04 - "]
pub txfull : TXFULL , # [doc = "0x08 - "]
pub rxempty : RXEMPTY , # [doc = "0x0c - This register contains the current raw level of the rx event trigger. Writes to this register have no effect."]
pub ev_status : EV_STATUS , # [doc = "0x10 - When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub ev_pending : EV_PENDING , # [doc = "0x14 - This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events."]
pub ev_enable : EV_ENABLE , # [doc = "0x18 - "]
pub txempty : TXEMPTY , # [doc = "0x1c - "]
pub rxfull : RXFULL , } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxtx](rxtx) module"]
pub type RXTX = crate :: Reg < u32 , _RXTX > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RXTX ; # [doc = "`read()` method returns [rxtx::R](rxtx::R) reader structure"]
impl crate :: Readable for RXTX { } # [doc = "`write(|w| ..)` method takes [rxtx::W](rxtx::W) writer structure"]
impl crate :: Writable for RXTX { } # [doc = ""]
pub mod rxtx { # [doc = "Reader of register RXTX"]
pub type R = crate :: R < u32 , super :: RXTX > ; # [doc = "Writer for register RXTX"]
pub type W = crate :: W < u32 , super :: RXTX > ; # [doc = "Register RXTX `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RXTX { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `rxtx`"]
pub type RXTX_R = crate :: R < u8 , u8 > ; # [doc = "Write proxy for field `rxtx`"]
pub struct RXTX_W < 'a > { w : & 'a mut W , } impl < 'a > RXTX_W < 'a > { # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub unsafe fn bits (self , value : u8) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0xff) | ((value as u32) & 0xff) ; self . w } } impl R { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& self) -> RXTX_R { RXTX_R :: new ((self . bits & 0xff) as u8) } } impl W { # [doc = "Bits 0:7"]
# [inline (always)]
pub fn rxtx (& mut self) -> RXTX_W { RXTX_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txfull](txfull) module"]
pub type TXFULL = crate :: Reg < u32 , _TXFULL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _TXFULL ; # [doc = "`read()` method returns [txfull::R](txfull::R) reader structure"]
impl crate :: Readable for TXFULL { } # [doc = "`write(|w| ..)` method takes [txfull::W](txfull::W) writer structure"]
impl crate :: Writable for TXFULL { } # [doc = ""]
pub mod txfull { # [doc = "Reader of register TXFULL"]
pub type R = crate :: R < u32 , super :: TXFULL > ; # [doc = "Writer for register TXFULL"]
pub type W = crate :: W < u32 , super :: TXFULL > ; # [doc = "Register TXFULL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: TXFULL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `txfull`"]
pub type TXFULL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `txfull`"]
pub struct TXFULL_W < 'a > { w : & 'a mut W , } impl < 'a > TXFULL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txfull (& self) -> TXFULL_R { TXFULL_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn txfull (& mut self) -> TXFULL_W { TXFULL_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxempty](rxempty) module"]
pub type RXEMPTY = crate :: Reg < u32 , _RXEMPTY > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RXEMPTY ; # [doc = "`read()` method returns [rxempty::R](rxempty::R) reader structure"]
impl crate :: Readable for RXEMPTY { } # [doc = "`write(|w| ..)` method takes [rxempty::W](rxempty::W) writer structure"]
impl crate :: Writable for RXEMPTY { } # [doc = ""]
pub mod rxempty { # [doc = "Reader of register RXEMPTY"]
pub type R = crate :: R < u32 , super :: RXEMPTY > ; # [doc = "Writer for register RXEMPTY"]
pub type W = crate :: W < u32 , super :: RXEMPTY > ; # [doc = "Register RXEMPTY `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RXEMPTY { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `rxempty`"]
pub type RXEMPTY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rxempty`"]
pub struct RXEMPTY_W < 'a > { w : & 'a mut W , } impl < 'a > RXEMPTY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxempty (& self) -> RXEMPTY_R { RXEMPTY_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxempty (& mut self) -> RXEMPTY_W { RXEMPTY_W { w : self } } } } # [doc = "This register contains the current raw level of the rx event trigger. Writes to this register have no effect.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_status](ev_status) module"]
pub type EV_STATUS = crate :: Reg < u32 , _EV_STATUS > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_STATUS ; # [doc = "`read()` method returns [ev_status::R](ev_status::R) reader structure"]
impl crate :: Readable for EV_STATUS { } # [doc = "`write(|w| ..)` method takes [ev_status::W](ev_status::W) writer structure"]
impl crate :: Writable for EV_STATUS { } # [doc = "This register contains the current raw level of the rx event trigger. Writes to this register have no effect."]
pub mod ev_status { # [doc = "Reader of register EV_STATUS"]
pub type R = crate :: R < u32 , super :: EV_STATUS > ; # [doc = "Writer for register EV_STATUS"]
pub type W = crate :: W < u32 , super :: EV_STATUS > ; # [doc = "Register EV_STATUS `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_STATUS { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx`"]
pub type TX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx`"]
pub struct TX_W < 'a > { w : & 'a mut W , } impl < 'a > TX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx`"]
pub type RX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx`"]
pub struct RX_W < 'a > { w : & 'a mut W , } impl < 'a > RX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - Level of the ``tx`` event"]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - Level of the ``rx`` event"]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Level of the ``tx`` event"]
# [inline (always)]
pub fn tx (& mut self) -> TX_W { TX_W { w : self } } # [doc = "Bit 1 - Level of the ``rx`` event"]
# [inline (always)]
pub fn rx (& mut self) -> RX_W { RX_W { w : self } } } } # [doc = "When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_pending](ev_pending) module"]
pub type EV_PENDING = crate :: Reg < u32 , _EV_PENDING > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_PENDING ; # [doc = "`read()` method returns [ev_pending::R](ev_pending::R) reader structure"]
impl crate :: Readable for EV_PENDING { } # [doc = "`write(|w| ..)` method takes [ev_pending::W](ev_pending::W) writer structure"]
impl crate :: Writable for EV_PENDING { } # [doc = "When a rx event occurs, the corresponding bit will be set in this register. To clear the Event, set the corresponding bit in this register."]
pub mod ev_pending { # [doc = "Reader of register EV_PENDING"]
pub type R = crate :: R < u32 , super :: EV_PENDING > ; # [doc = "Writer for register EV_PENDING"]
pub type W = crate :: W < u32 , super :: EV_PENDING > ; # [doc = "Register EV_PENDING `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_PENDING { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx`"]
pub type TX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx`"]
pub struct TX_W < 'a > { w : & 'a mut W , } impl < 'a > TX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx`"]
pub type RX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx`"]
pub struct RX_W < 'a > { w : & 'a mut W , } impl < 'a > RX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - `1` if a `tx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn tx (& mut self) -> TX_W { TX_W { w : self } } # [doc = "Bit 1 - `1` if a `rx` event occurred. This Event is triggered on a **falling** edge."]
# [inline (always)]
pub fn rx (& mut self) -> RX_W { RX_W { w : self } } } } # [doc = "This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events.\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ev_enable](ev_enable) module"]
pub type EV_ENABLE = crate :: Reg < u32 , _EV_ENABLE > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _EV_ENABLE ; # [doc = "`read()` method returns [ev_enable::R](ev_enable::R) reader structure"]
impl crate :: Readable for EV_ENABLE { } # [doc = "`write(|w| ..)` method takes [ev_enable::W](ev_enable::W) writer structure"]
impl crate :: Writable for EV_ENABLE { } # [doc = "This register enables the corresponding rx events. Write a ``0`` to this register to disable individual events."]
pub mod ev_enable { # [doc = "Reader of register EV_ENABLE"]
pub type R = crate :: R < u32 , super :: EV_ENABLE > ; # [doc = "Writer for register EV_ENABLE"]
pub type W = crate :: W < u32 , super :: EV_ENABLE > ; # [doc = "Register EV_ENABLE `reset()`'s with value 0"]
impl crate :: ResetValue for super :: EV_ENABLE { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `tx`"]
pub type TX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `tx`"]
pub struct TX_W < 'a > { w : & 'a mut W , } impl < 'a > TX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } # [doc = "Reader of field `rx`"]
pub type RX_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rx`"]
pub struct RX_W < 'a > { w : & 'a mut W , } impl < 'a > RX_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! (0x01 << 1)) | (((value as u32) & 0x01) << 1) ; self . w } } impl R { # [doc = "Bit 0 - Write a ``1`` to enable the ``tx`` Event"]
# [inline (always)]
pub fn tx (& self) -> TX_R { TX_R :: new ((self . bits & 0x01) != 0) } # [doc = "Bit 1 - Write a ``1`` to enable the ``rx`` Event"]
# [inline (always)]
pub fn rx (& self) -> RX_R { RX_R :: new (((self . bits >> 1) & 0x01) != 0) } } impl W { # [doc = "Bit 0 - Write a ``1`` to enable the ``tx`` Event"]
# [inline (always)]
pub fn tx (& mut self) -> TX_W { TX_W { w : self } } # [doc = "Bit 1 - Write a ``1`` to enable the ``rx`` Event"]
# [inline (always)]
pub fn rx (& mut self) -> RX_W { RX_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [txempty](txempty) module"]
pub type TXEMPTY = crate :: Reg < u32 , _TXEMPTY > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _TXEMPTY ; # [doc = "`read()` method returns [txempty::R](txempty::R) reader structure"]
impl crate :: Readable for TXEMPTY { } # [doc = "`write(|w| ..)` method takes [txempty::W](txempty::W) writer structure"]
impl crate :: Writable for TXEMPTY { } # [doc = ""]
pub mod txempty { # [doc = "Reader of register TXEMPTY"]
pub type R = crate :: R < u32 , super :: TXEMPTY > ; # [doc = "Writer for register TXEMPTY"]
pub type W = crate :: W < u32 , super :: TXEMPTY > ; # [doc = "Register TXEMPTY `reset()`'s with value 0"]
impl crate :: ResetValue for super :: TXEMPTY { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `txempty`"]
pub type TXEMPTY_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `txempty`"]
pub struct TXEMPTY_W < 'a > { w : & 'a mut W , } impl < 'a > TXEMPTY_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn txempty (& self) -> TXEMPTY_R { TXEMPTY_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn txempty (& mut self) -> TXEMPTY_W { TXEMPTY_W { w : self } } } } # [doc = "\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [rxfull](rxfull) module"]
pub type RXFULL = crate :: Reg < u32 , _RXFULL > ; # [allow (missing_docs)]
# [doc (hidden)]
pub struct _RXFULL ; # [doc = "`read()` method returns [rxfull::R](rxfull::R) reader structure"]
impl crate :: Readable for RXFULL { } # [doc = "`write(|w| ..)` method takes [rxfull::W](rxfull::W) writer structure"]
impl crate :: Writable for RXFULL { } # [doc = ""]
pub mod rxfull { # [doc = "Reader of register RXFULL"]
pub type R = crate :: R < u32 , super :: RXFULL > ; # [doc = "Writer for register RXFULL"]
pub type W = crate :: W < u32 , super :: RXFULL > ; # [doc = "Register RXFULL `reset()`'s with value 0"]
impl crate :: ResetValue for super :: RXFULL { type Type = u32 ; # [inline (always)]
fn reset_value () -> Self :: Type { 0 } } # [doc = "Reader of field `rxfull`"]
pub type RXFULL_R = crate :: R < bool , bool > ; # [doc = "Write proxy for field `rxfull`"]
pub struct RXFULL_W < 'a > { w : & 'a mut W , } impl < 'a > RXFULL_W < 'a > { # [doc = r"Sets the field bit"]
# [inline (always)]
pub fn set_bit (self) -> & 'a mut W { self . bit (true) } # [doc = r"Clears the field bit"]
# [inline (always)]
pub fn clear_bit (self) -> & 'a mut W { self . bit (false) } # [doc = r"Writes raw bits to the field"]
# [inline (always)]
pub fn bit (self , value : bool) -> & 'a mut W { self . w . bits = (self . w . bits & ! 0x01) | ((value as u32) & 0x01) ; self . w } } impl R { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxfull (& self) -> RXFULL_R { RXFULL_R :: new ((self . bits & 0x01) != 0) } } impl W { # [doc = "Bit 0"]
# [inline (always)]
pub fn rxfull (& mut self) -> RXFULL_W { RXFULL_W { w : self } } } } } # [no_mangle]
static mut DEVICE_PERIPHERALS : bool = false ; # [doc = r"All the peripherals"]
# [allow (non_snake_case)]
pub struct Peripherals { # [doc = "CTRL"]
pub CTRL : CTRL , # [doc = "IDENTIFIER_MEM"]
pub IDENTIFIER_MEM : IDENTIFIER_MEM , # [doc = "LEDS"]
pub LEDS : LEDS , # [doc = "MATRIX"]
pub MATRIX : MATRIX , # [doc = "OLED_CTL"]
pub OLED_CTL : OLED_CTL , # [doc = "OLED_SPI"]
pub OLED_SPI : OLED_SPI , # [doc = "SDRAM"]
pub SDRAM : SDRAM , # [doc = "TIMER0"]
pub TIMER0 : TIMER0 , # [doc = "UART"]
pub UART : UART , } impl Peripherals { # [doc = r"Returns all the peripherals *once*"]
# [inline]
pub fn take () -> Option < Self > { riscv :: interrupt :: free (| _ | { if unsafe { DEVICE_PERIPHERALS } { None } else { Some (unsafe { Peripherals :: steal () }) } }) } # [doc = r"Unchecked version of `Peripherals::take`"]
# [inline]
pub unsafe fn steal () -> Self { DEVICE_PERIPHERALS = true ; Peripherals { CTRL : CTRL { _marker : PhantomData } , IDENTIFIER_MEM : IDENTIFIER_MEM { _marker : PhantomData } , LEDS : LEDS { _marker : PhantomData } , MATRIX : MATRIX { _marker : PhantomData } , OLED_CTL : OLED_CTL { _marker : PhantomData } , OLED_SPI : OLED_SPI { _marker : PhantomData } , SDRAM : SDRAM { _marker : PhantomData } , TIMER0 : TIMER0 { _marker : PhantomData } , UART : UART { _marker : PhantomData } , } } }